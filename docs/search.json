[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PF0914 Desarrollo de sistemas de información geográfica en la Web 2024-I",
    "section": "",
    "text": "Presentación\nEste curso curso trata sobre el desarrollo de sistemas de información geográfica (SIG) en la Web. Los estudiantes adquieren las habilidades y conocimientos necesarios para construir SIG con una arquitectura cliente-servidor. Para el desarrollo del cliente (front end) se estudia Leaflet, una biblioteca del lenguaje de programación JavaScript especializada en la generación de mapas interactivos. El servidor (back end) se basa en una extensión de Django, el popular marco de trabajo para desarrollo web del lenguaje Python, llamada GeoDjango, la cual está orientada a aplicaciones web geoespaciales.\nLos contenidos del curso y los recursos relacionados se comparten en el sitio web https://pf0914-desarrollosigweb.github.io/2024-i/ y en la plataforma Mediación Virtual de la Universidad de Costa Rica.\nEl curso se imparte en la Maestría Profesional en Sistemas de Información Geográfica y Teledetección de la Universidad de Costa Rica y la Universidad Nacional.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#general",
    "href": "index.html#general",
    "title": "PF0914 Desarrollo de sistemas de información geográfica en la Web 2024-I",
    "section": "General",
    "text": "General\nDesarrollar sistemas de información geográfica en la Web con una arquitectura cliente-servidor.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "index.html#específicos",
    "href": "index.html#específicos",
    "title": "PF0914 Desarrollo de sistemas de información geográfica en la Web 2024-I",
    "section": "Específicos",
    "text": "Específicos\n\nCrear páginas web con el lenguaje de marcado de hipertexto (HTML).\n\nAplicar estilos a páginas web con el lenguaje de hojas de estilo en cascada (CSS).\n\nAñadir interactividad a páginas web mediante el lenguaje de programación JavaScript.\n\nCrear mapas interactivos para páginas web con la biblioteca Leaflet de JavaScript.\n\nDesarrollar aplicaciones web geoespaciales basadas en el marco de trabajo GeoDjango.",
    "crumbs": [
      "Presentación"
    ]
  },
  {
    "objectID": "programa-curso.html",
    "href": "programa-curso.html",
    "title": "Programa del curso",
    "section": "",
    "text": "Programa del curso",
    "crumbs": [
      "Programa del curso"
    ]
  },
  {
    "objectID": "parte-i-lenguajes-basicos-desarrollo-web.html",
    "href": "parte-i-lenguajes-basicos-desarrollo-web.html",
    "title": "I - Lenguajes básicos para desarrollo de sistemas de información en la Web",
    "section": "",
    "text": "1 Introducción al desarrollo de sistemas de información en la Web",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de sistemas de información en la Web"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-web.html",
    "href": "01-introduccion-desarrollo-web.html",
    "title": "1  Introducción al desarrollo de sistemas de información en la Web",
    "section": "",
    "text": "1.1 Tecnologías utilizadas en el desarrollo de SIG en la Web\nEn general, las tecnologías que se utilizan en el desarrollo de aplicaciones para la Web pueden dividirse en dos grupos: las de front end y las de back end. El front end se encarga de presentarle los datos al usuario (ej. en mapas) y capturar sus instrucciones para manipularlos (ej. alejamientos, acercamientos, filtros, análisis). El back end procesa los datos de acuerdo con estas instrucciones. Típicamente, en el caso de los SIG en la Web, el front end se implementa en un navegador web y el back end a través de servidores de mapas y de bases de datos geoespaciales, entre otros. Los componentes del front end y del back end se ilustran en la figura 4.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de sistemas de información en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de sistemas de información en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-web.html#tecnologías-utilizadas-en-el-desarrollo-de-sig-en-la-web",
    "href": "01-introduccion-desarrollo-web.html#tecnologías-utilizadas-en-el-desarrollo-de-sig-en-la-web",
    "title": "1  Introducción al desarrollo de sistemas de información en la Web",
    "section": "",
    "text": "Figura 4. Front end y back end de SIG en la Web.\n\n&lt;/figure&gt;  \n\nA continuación, se describen las principales tecnologías utilizadas tanto en el front end como en el back end.\n\n1.1.1 Front end\nLas tres principales tecnologías que se utilizan en el desarrollo de aplicaciones web en el front end son el lenguaje de marcas HTML, el lenguaje de diseño gráfico CSS y el lenguaje de programación JavaScript.\n\n1.1.1.1 HTML\nEl Lenguaje de Marcas de Hipertexto o HTML (siglas en inglés de Hypertext Markup Language) es el lenguaje de marcas estándar para documentos diseñados para desplegarse en un navegador web. Fue creado en 1990 por Tim Berners-Lee.\nEl HTML especifica la estructura y la semántica de una página web mediante marcas o tags. Un navegador web recibe documentos HTML desde un servidor web (o desde almacenamiento local) y despliega sus componentes (textos, imágenes, hiperenlaces, etc.) de acuerdo con las especificaciones contenidas en los tags.\nEl siguiente ejemplo de documento HTML contiene, entre otros, tags para el título del documento (&lt;title&gt;&lt;/title&gt;), encabezados (&lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;), una imagen (&lt;img&gt;) y un hipervínculo (&lt;a&gt;&lt;/a&gt;).\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Tim Berners-Lee&lt;/title&gt;     \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Tim Berners-Lee&lt;/h1&gt;\n    Sir Timothy John Berners-Lee es un científico de la computación inglés, conocido por crear la World Wide Web (WWW).    \n    &lt;p&gt;\n    &lt;img src=\"img/tim-berners-lee-128px.jpg\"&gt;\n    \n    &lt;h2&gt;Información general&lt;/h2&gt;\n    Tim Berners-Lee nació en el sudoeste de Londres, Reino Unido, el 8 de junio de 1955. \n    \n    &lt;h2&gt;Creación de la WWW&lt;/h2&gt;\n    Tim Berners-Lee creó la WWW en 1989 como parte de su trabajo en la &lt;a href=\"https://home.cern/\"&gt;Organización Europea para la Investigación Nuclear (CERN)&lt;/a&gt;.\n&lt;/body&gt;\n&lt;/html&gt;\nLa página web que se despliega como producto del documento HTML anterior se muestra en la figura 5.\n\n\n\n\nFigura 5. Página web generada mediante HTML.\n\n\n\nEL HTML es un estándar del World Wide Web Consortium (W3C), un consorcio internacional creado por Tim Berners-Lee en 1994 que genera recomendaciones y estándares que aseguran el crecimiento de la WWW a largo plazo. La versión más reciente del estándar es HTML5 y se caracteriza por incluir soporte para los tipos más recientes de multimedios y reducir la necesidad de plataformas propietarias (ej. Adobe Flash) para su incorporación en páginas web que pueden desplegarse en diferentes tipos de dispositivos y tamaños de pantallas (computadoras, tabletas, teléfonos, pantallas gigantes, etc.).\n\n\n1.1.1.2 CSS\nHojas de Estilo en Cascada o CSS (siglas en inglés de Cascading Style Sheets) es un lenguaje de diseño gráfico para describir la presentación de un documento escrito en un lenguaje de marcas (ej. HTML). Permite especificar aspectos de diseño como colores, tipos y tamaños de letra, márgenes, alineamientos y muchos otros.\nCSS permite manejar la presentación separadamente del contenido, lo que brinda una mayor una flexibilidad en el diseño. Por ejemplo, varios archivos HTML pueden compartir una misma presentación al hacer referencia a un mismo archivo CSS. También posibilita un despliegue diferenciado de acuerdo a los tipos y tamaños de pantallas, en conjunto con HTML5.\nAl igual que HTML, CSS es un estándar de W3C. Fue propuesto por Håkon Wium Lie, quien trabajaba en CERN con Tim Berners-Lee, en 1994.\nCSS especifica el estilo de un documento mediante propiedades de sus diferentes elementos. Seguidamente, se presenta un ejemplo de documento CSS que define varias propiedades de los encabezados y del cuerpo principal del documento HTML mostrado anteriormente.\nbody {\n    background-color:black;\n    color:white;\n    font-family:Arial;\n    margin:0 4px 0 0;\n    border:3px solid;\n}\n\nh1 {\n    color:blue;\n}       \n\nh2 {\n    color:gray;\n}   \nEl resultado de la aplicación de estos estilos se muestra en la figura 6.\n\n\n\n\nFigura 6. Página web con estilos especificados mediante CSS.\n\n\n\n\n\n1.1.1.3 JavaScript\nJavaScript es un lenguaje de programación utilizado para añadir interactividad a las páginas web. Fue creado en 1995 por Brendan Eich, con el fin de dar interactividad a las páginas web leídas con el navegador Netscape. En la actualidad, es utilizado por todos los principales navegadores web y en la mayoría de los sitios web.\nMediante JavaScript es posible:\n\nControlar multimedia.\nReaccionar a “eventos” (ej. presionar un botón).\nModificar dinámicamente el contenido de una página web.\nManejar mapas interactivos.\n\nEl siguiente ejemplo de código JavaScript define una función. La figura 7 muestra el resultado de su ejecución desde un documento HTML.\nfunction desplegarFechaHora () {\n  document.getElementById('fechaYhora').innerHTML = Date();\n}\n\n\n\n\nFigura 7. Página web con botón que llama a función en JavaScript que despliega la fecha y la hora.\n\n\n\n\n1.1.1.3.1 Bibliotecas geoespaciales\nHay varias bibliotecas de JavaScript que permiten incorporar mapas en páginas web, junto con controles para realizar algunas acciones como acercamientos, alejamientos, búsquedas y otros. También facilitan la generación de análisis y visualizaciones como mapas de coropletas (choropleth maps), mapas de calor (heat maps) y mapas de agrupaciones (cluster maps). El código fuente en JavaScript se invoca desde tags de HTML. Usualmente, estas bibliotecas se distribuyen con un conjunto de hojas de estilo (CSS).\nAlgunas de las más populares de estas bibliotecas son Leaflet, OpenLayers y Google Maps.\n\n\n\n\n1.1.2 Back end\nEn el back end pueden utilizarse una gran cantidad de tecnologías. Aquí se destaca el lenguaje SQL, para bases de datos, y lenguajes y entornos de ejecución utilizados en servidores web y para acceso a datos.\n\n1.1.2.1 SQL\nEl Lenguaje de Consulta Estructurada o SQL (siglas en inglés de Structured Query Language) es un lenguaje de programación para consulta y gestión de datos. Fue creado en 1974 por Donald D. Chamberlin y Raymond F. Boyce. Es ampliamente utilizado en bases de datos relacionales y algunas de sus variantes se utilizan también en bases de datos NoSQL.\nLos principales motores de bases de datos implementan tipos de datos geométricos (puntos, líneas, polígonos, etc.) que pueden consultarse y editarse con funciones SQL. Estas extensiones espaciales de los motores de bases de datos están basadas en estándares como Simple Features.\n\n\n1.1.2.2 Lenguajes y entornos de ejecución para servidores\nHay una gran cantidad de lenguajes que se utilizan para ejecutar procesos en los servidores. Algunos de los principales son PHP, Python, Ruby y el entorno de ejecución Node.js.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de sistemas de información en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de sistemas de información en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-web.html#recursos-adicionales",
    "href": "01-introduccion-desarrollo-web.html#recursos-adicionales",
    "title": "1  Introducción al desarrollo de sistemas de información en la Web",
    "section": "1.2 Recursos adicionales",
    "text": "1.2 Recursos adicionales\n\nMDN Web Docs\nW3Schools",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de sistemas de información en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de sistemas de información en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-web.html#ejercicios",
    "href": "01-introduccion-desarrollo-web.html#ejercicios",
    "title": "1  Introducción al desarrollo de sistemas de información en la Web",
    "section": "1.3 Ejercicios",
    "text": "1.3 Ejercicios\n\nCree en CodePen un pen sobre Tim-Berners-Lee.\n1.1. Ingrese a CodePen (puede hacerlo con su cuenta de GitHub) y cree un pen.\n1.2. Agregue el siguiente contenido para cada sección (note los cambios que se producen en la página web al incorporar cada una de las secciones):\n\nHTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Tim Berners-Lee&lt;/title&gt;     \n\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"css/estilos.css\"&gt;\n    &lt;script src=\"js/funciones.js\"&gt;&lt;/script&gt;    \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Tim Berners-Lee&lt;/h1&gt;\n    Sir Timothy John Berners-Lee es un científico de la computación inglés, conocido por crear la World Wide Web (WWW).    \n    &lt;p&gt;\n    &lt;img src=\"https://github.com/tpb729-desarrollosigweb-2021/leccion-01-sigweb/raw/main/img/tim-berners-lee-128px.jpg\"&gt;\n    \n    &lt;h2&gt;Información general&lt;/h2&gt;\n    Tim Berners-Lee nació en el sudoeste de Londres, Reino Unido, el 8 de junio de 1955. \n    \n    &lt;h2&gt;Creación de la WWW&lt;/h2&gt;\n    Tim Berners-Lee creó la WWW en 1989 como parte de su trabajo en la &lt;a href=\"https://home.cern/\"&gt;Organización Europea para la Investigación Nuclear (CERN)&lt;/a&gt;.\n  \n    &lt;p&gt;\n    \n    &lt;button type=\"button\" onclick=\"desplegarFechaHora()\"&gt;\n      Presione para desplegar la fecha y la hora\n    &lt;/button&gt;\n\n    &lt;p id=\"fechaYhora\"&gt;&lt;/p&gt;  \n&lt;/body&gt;\n&lt;/html&gt;\nCSS\nbody {\n    background-color:black;\n    color:white;\n    font-family:Arial;\n    margin:0 4px 0 0;\n    border:3px solid;\n}\n\nh1 {\n    color:blue;\n}       \n\nh2 {\n    color:gray;\n}   \nJS\nfunction desplegarFechaHora () {\n  document.getElementById('fechaYhora').innerHTML = Date();\n}\n1.3. En la sección de HTML, puede dejar únicamente la parte que corresponde al body del documento.\n1.4. Guarde su pen y asígnele un nombre (ej. “Biografía de Tim Berners-Lee”).\n1.5. Realice cambios en el código HTML, CSS y JavaScript y observe como se afecta la página web resultante. Sugerencias: agregue más texto, cambie los colores, cambie el tamaño de las letras, cambie el texto que se despliega al presionar el botón, …\n\nCree en GitHub un sitio web sobre Tim-Berners-Lee.\n2.1. Ingrese a GitHub y cree un repositorio llamado “tim-berners-lee”.\n2.2. Clone el repositorio en su computadora con el comando git clone. Debe tener instalado el programa Git.\n2.3. En el directorio clonado, cree un archivo llamado “index.html” con el código HTML del ejercicio 1. Abra el archivo con un navegador web.\n2.4. Cree subdirectorio llamado “css” y un archivo llamado “css/estilos.css” con el código CSS del ejercicio 1. Abra (o refresque) de nuevo el archivo HTML y observe los cambios.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de sistemas de información en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de sistemas de información en la Web</span>"
    ]
  },
  {
    "objectID": "parte-i-lenguajes-basicos-desarrollo-sig-web.html",
    "href": "parte-i-lenguajes-basicos-desarrollo-sig-web.html",
    "title": "I - Lenguajes básicos para desarrollo de SIG en la Web",
    "section": "",
    "text": "1 Introducción al desarrollo de SIG en la Web",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-sig-web.html",
    "href": "01-introduccion-desarrollo-sig-web.html",
    "title": "1  Introducción al desarrollo de SIG en la Web",
    "section": "",
    "text": "1.1 SIG de escritorio y SIG en la Web\nUn sistema de información geográfica (SIG) está orientado al manejo de información relacionada con la localización de objetos o fenómenos en el espacio. Un SIG facilita la realización de tareas como:\nEn sus inicios, en la década de 1960 (y durante varias décadas subsiguientes), los SIG fueron implementados principalmente como aplicaciones de escritorio. Es decir, sistemas de software que funcionan íntegramente en la computadora del usuario, sin acceder a otras computadoras o recursos externos para realizar tareas como las mencionadas anteriormente. Con la paulatina popularización de las redes de computadoras y de la Internet, a partir de la década de 1980, se hizo cada vez más evidente la conveniencia de utilizar la World Wide Web (WWW) para realizar de manera ditribuida (i.e. en varias computadoras) estas tareas, así como de aprovechar el potencial de su interfaz, entre otras ventajas.\nLa WWW, llamada también “la Web”, es un sistema de distribución de documentos de hipertexto e hipermedia, llamados también páginas web, interconectados a través del Protocolo de Transferencia de Hipertexto o HTTP (siglas en inglés de Hypertext Transfer Protocol), uno de los integrantes de la familia de protocolos de Internet. Con un navegador web, un usuario visualiza sitios web compuestos de páginas web que pueden contener textos, imágenes, vídeos u otros contenidos multimedia, permitiendo la navegación a través de esas páginas mediante hiperenlaces. Los sitios web se alojan en servidores que responden a las solicitudes de los clientes (i.e. navegadores web), de acuerdo con el modelo cliente-servidor, como se muestra en la Figura 1.1.\nLa WWW fue creada en 1989 por el científico inglés Tim Berners-Lee, como parte de su trabajo en la Organización Europea para la Investigación Nuclear (CERN, Conseil européen pour la recherche nucléaire). Fue concebida originalmente como parte de un sistema para que los investigadores del CERN utilizaran y compartieran documentos con investigadores de otros centros de investigación.\nLos SIG en la Web permiten, por ejemplo, visualizar en un navegador de Internet mapas elaborados con datos geoespaciales almacenados en repositorios remotos o acceder servicios de geoprocesamiento disponibles en servidores administrados por terceros. En la Figura 1.2 se muestra un ejemplo de SIG en la Web.\nAlgunas de las diferencias mencionadas entre los SIG de escritorio y los SIG en la Web se ilustran en la Figura 1.3.\nAdicionalmente, en la tabla 1.1. se comparan algunas características de ambos tipos de SIG.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de SIG en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-sig-web.html#sig-de-escritorio-y-sig-en-la-web",
    "href": "01-introduccion-desarrollo-sig-web.html#sig-de-escritorio-y-sig-en-la-web",
    "title": "1  Introducción al desarrollo de SIG en la Web",
    "section": "",
    "text": "Lectura, edición, almacenamiento y, en general, gestión de datos geográficos.\nGeneración de visualizaciones tales como mapas, gráficos y tablas.\nAnálisis de datos e información geográfica.\n\n\n\n\n\n\n\n\n\nFigura 1.1: Protocolo HTTP.\n\n\n\n\n\n\n\n\n\n\n\nFigura 1.2: Portal geoespacial del Atlas of Livinig Australia (ALA). Fuente: ALA.\n\n\n\n\n\n\n\n\n\n\nFigura 1.3: SIG de escritorio y SIG en la Web.\n\n\n\n\n\n\nTabla 1.1. Comparación de características de los SIG de escritorio y los SIG en la Web.\n\n\n\nSIG de escritorio\n\n\nSIG en la Web\n\n\n\n\nAplicación “pesada”: consume una gran cantidad de espacio en disco, así como memoria y procesador\n\n\nAplicación “liviana” (navegador web): consume menos recursos\n\n\n\n\nFuncionalidades diversas\n\n\nFuncionalidad orientada a tareas específicas\n\n\n\n\nInterfaz de usuario compleja\n\n\nInterfaz de usuario sencilla\n\n\n\n\nPara usuarios especializados\n\n\nPara usuarios no especializados\n\n\n\n\nMantiene los datos en medios locales de almacenamiento (ej. en discos duros)\n\n\nUsa datos en repositorios remotos (ej. servidores de bases de datos, servidores de mapas con servicios como WMS, WFS y otros)\n\n\n\n\nEl procesamiento se realiza localmente, en la computadora del usuario\n\n\nEl procesamiento se realiza en servidores remotos",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de SIG en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-sig-web.html#tecnologías-utilizadas-en-el-desarrollo-de-sig-en-la-web",
    "href": "01-introduccion-desarrollo-sig-web.html#tecnologías-utilizadas-en-el-desarrollo-de-sig-en-la-web",
    "title": "1  Introducción al desarrollo de SIG en la Web",
    "section": "1.2 Tecnologías utilizadas en el desarrollo de SIG en la Web",
    "text": "1.2 Tecnologías utilizadas en el desarrollo de SIG en la Web\nEn general, las tecnologías que se utilizan en el desarrollo de aplicaciones para la Web pueden dividirse en dos grupos: las de front end (cliente) y las de back end (servidor). El front end se encarga de presentarle los datos al usuario (ej. en mapas) y capturar sus instrucciones para manipularlos (ej. alejamientos, acercamientos, filtros, análisis). El back end procesa los datos de acuerdo con estas instrucciones. Típicamente, en el caso de los SIG en la Web, el front end se implementa en un navegador web y el back end a través de servidores de mapas y de bases de datos geoespaciales, entre otros. Los componentes del front end y del back end se ilustran en la Figura 1.4.\n\n\n\n\n\n\nFigura 1.4: Front end y back end de SIG en la Web.\n\n\n\nA continuación, se describen las principales tecnologías utilizadas tanto en el front end como en el back end.\n\n1.2.1 Front end\nLas tres principales tecnologías que se utilizan en el desarrollo de aplicaciones web en el front end son el lenguaje de marcas HTML, el lenguaje de diseño gráfico CSS y el lenguaje de programación JavaScript.\n\n1.2.1.1 HTML\nEl Lenguaje de Marcas de Hipertexto o HTML (siglas en inglés de Hypertext Markup Language) es el lenguaje de marcas estándar para documentos diseñados para desplegarse en un navegador web. Fue creado en 1990 por Tim Berners-Lee.\nEl HTML especifica la estructura y la semántica de una página web mediante marcas o tags. Un navegador web recibe documentos HTML desde un servidor web (o desde almacenamiento local) y despliega sus componentes (textos, imágenes, hiperenlaces, etc.) de acuerdo con las especificaciones contenidas en los tags.\nEl siguiente ejemplo de documento HTML contiene, entre otros, tags para el título del documento (&lt;title&gt;&lt;/title&gt;), encabezados (&lt;h1&gt;&lt;/h1&gt;, &lt;h2&gt;&lt;/h2&gt;), una imagen (&lt;img&gt;) y un hipervínculo (&lt;a&gt;&lt;/a&gt;).\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Tim Berners-Lee&lt;/title&gt;     \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Tim Berners-Lee&lt;/h1&gt;\n    Sir Timothy John Berners-Lee es un científico de la computación inglés, conocido por crear la World Wide Web (WWW).    \n    &lt;p&gt;\n    &lt;img src=\"img/tim-berners-lee-128px.jpg\"&gt;\n    \n    &lt;h2&gt;Información general&lt;/h2&gt;\n    Tim Berners-Lee nació en el sudoeste de Londres, Reino Unido, el 8 de junio de 1955. \n    \n    &lt;h2&gt;Creación de la WWW&lt;/h2&gt;\n    Tim Berners-Lee creó la WWW en 1989 como parte de su trabajo en la &lt;a href=\"https://home.cern/\"&gt;Organización Europea para la Investigación Nuclear (CERN)&lt;/a&gt;.\n&lt;/body&gt;\n&lt;/html&gt;\nLa página web que se despliega como producto del documento HTML anterior se muestra en la Figura 1.5.\n\n\n\n\n\n\nFigura 1.5: Documento HTML.\n\n\n\nEL HTML es un estándar del World Wide Web Consortium (W3C), un consorcio internacional creado por Tim Berners-Lee en 1994 que genera recomendaciones y estándares que aseguran el crecimiento de la WWW a largo plazo. La versión más reciente del estándar es HTML5 y se caracteriza por incluir soporte para los tipos más recientes de multimedios y reducir la necesidad de plataformas propietarias (ej. Adobe Flash) para su incorporación en páginas web que pueden desplegarse en diferentes tipos de dispositivos y tamaños de pantallas (computadoras, tabletas, teléfonos, pantallas gigantes, etc.).\n\n\n1.2.1.2 CSS\nHojas de Estilo en Cascada o CSS (siglas en inglés de Cascading Style Sheets) es un lenguaje de diseño gráfico para describir la presentación de un documento escrito en un lenguaje de marcas (ej. HTML). Permite especificar aspectos de diseño como colores, tipos y tamaños de letra, márgenes, alineamientos y muchos otros.\nCSS permite manejar la presentación separadamente del contenido, lo que brinda una mayor una flexibilidad en el diseño. Por ejemplo, varios archivos HTML pueden compartir una misma presentación al hacer referencia a un mismo archivo CSS. También posibilita un despliegue diferenciado de acuerdo a los tipos y tamaños de pantallas, en conjunto con HTML5.\nAl igual que HTML, CSS es un estándar de W3C. Fue propuesto por Håkon Wium Lie, quien trabajaba en CERN con Tim Berners-Lee, en 1994.\nCSS especifica el estilo de un documento mediante propiedades de sus diferentes elementos. Seguidamente, se presenta un ejemplo de documento CSS que define varias propiedades de los encabezados y del cuerpo principal del documento HTML mostrado anteriormente.\nbody {\n    background-color:black;\n    color:white;\n    font-family:Arial;\n    margin:0 4px 0 0;\n    border:3px solid;\n}\n\nh1 {\n    color:blue;\n}       \n\nh2 {\n    color:gray;\n}   \nEl resultado de la aplicación de estos estilos se muestra en la Figura 1.6.\n\n\n\n\n\n\nFigura 1.6: Documento HTML con estilos especificados mediante CSS.\n\n\n\n\n\n1.2.1.3 JavaScript\nJavaScript es un lenguaje de programación utilizado para añadir interactividad a las páginas web. Fue creado en 1995 por Brendan Eich, con el fin de dar interactividad a las páginas web leídas con el navegador Netscape. En la actualidad, es utilizado por todos los principales navegadores web y en la mayoría de los sitios web.\nMediante JavaScript es posible:\n\nControlar multimedia.\nReaccionar a “eventos” (ej. presionar un botón).\nModificar dinámicamente el contenido de una página web.\nManejar mapas interactivos.\n\nEl siguiente ejemplo de código JavaScript define una función.\nfunction desplegarFechaHora () {\n  document.getElementById('fechaYhora').innerHTML = Date();\n}\nLa Figura 1.7 muestra el resultado de su ejecución desde un documento HTML.\n\n\n\n\n\n\nFigura 1.7: Documento HTML con botón que llama a función en JavaScript que despliega la fecha y la hora.\n\n\n\n\n1.2.1.3.1 Bibliotecas geoespaciales\nHay varias bibliotecas de JavaScript que permiten incorporar mapas en páginas web, junto con controles para realizar algunas acciones como acercamientos, alejamientos, búsquedas y otros. También facilitan la generación de análisis y visualizaciones como mapas de coropletas (choropleth maps), mapas de calor (heat maps) y mapas de agrupaciones (cluster maps). El código fuente en JavaScript se invoca desde tags de HTML. Usualmente, estas bibliotecas se distribuyen con un conjunto de hojas de estilo (CSS).\nAlgunas de las más populares de estas bibliotecas son Leaflet, OpenLayers y Google Maps.\n\n\n\n\n1.2.2 Back end\nEn el back end pueden utilizarse una gran cantidad de tecnologías. Aquí se destaca el lenguaje SQL, para bases de datos, y lenguajes y entornos de ejecución utilizados en servidores web y para acceso a datos.\n\n1.2.2.1 SQL\nEl Lenguaje de Consulta Estructurada o SQL (siglas en inglés de Structured Query Language) es un lenguaje de programación para consulta y gestión de datos. Fue creado en 1974 por Donald D. Chamberlin y Raymond F. Boyce. Es ampliamente utilizado en bases de datos relacionales y algunas de sus variantes se utilizan también en bases de datos NoSQL.\nLos principales motores de bases de datos implementan tipos de datos geométricos (puntos, líneas, polígonos, etc.) que pueden consultarse y editarse con funciones SQL. Estas extensiones espaciales de los motores de bases de datos están basadas en estándares como Simple Features.\n\n\n1.2.2.2 Lenguajes y entornos de ejecución para servidores\nHay una gran cantidad de lenguajes que se utilizan para ejecutar procesos en los servidores. Algunos de los principales son PHP, Python, Ruby y el entorno de ejecución Node.js.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de SIG en la Web</span>"
    ]
  },
  {
    "objectID": "01-introduccion-desarrollo-sig-web.html#recursos-adicionales",
    "href": "01-introduccion-desarrollo-sig-web.html#recursos-adicionales",
    "title": "1  Introducción al desarrollo de SIG en la Web",
    "section": "1.3 Recursos adicionales",
    "text": "1.3 Recursos adicionales\n\nMDN Web Docs\nW3Schools\n\n\n\n\nFigura 1.1: Protocolo HTTP.\nFigura 1.2: Portal geoespacial del Atlas of Livinig Australia (ALA). Fuente: ALA.\nFigura 1.3: SIG de escritorio y SIG en la Web.\nFigura 1.4: Front end y back end de SIG en la Web.\nFigura 1.5: Documento HTML.\nFigura 1.6: Documento HTML con estilos especificados mediante CSS.\nFigura 1.7: Documento HTML con botón que llama a función en JavaScript que despliega la fecha y la hora.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al desarrollo de SIG en la Web</span>"
    ]
  },
  {
    "objectID": "02-html.html",
    "href": "02-html.html",
    "title": "2  El Lenguaje de marcado de hipertexto (HTML)",
    "section": "",
    "text": "2.1 Introducción\nEl Lenguaje de Marcado de Hipertexto o HTML (siglas en inglés de Hypertext Markup Language) es el lenguaje de marcas estándar para documentos diseñados para desplegarse en un navegador web. El término “hipertexto” hace referencia a los enlaces que conectan páginas web entre sí, ya sea dentro de un mismo sitio web o entre diferentes sitios web (ej. este es un enlace al primer sitio web). El HTML fue creado en 1990 por Tim Berners-Lee. Junto con Hojas de Estilo en Cascada o CSS (siglas en inglés de Cascading Style Sheets) y JavaScript conforma el grupo de las tres tecnologías principales de la Web.\nEl HTML especifica la estructura y la semántica de una página web mediante marcas (también llamadas etiquetas) o tags. Un navegador web recibe documentos HTML desde un servidor web (o desde almacenamiento local) y despliega sus componentes (textos, imágenes, hiperenlaces, etc.) de acuerdo con las especificaciones contenidas en los tags. Se recomienda que los documentos HTML no contengan componentes de presentación ni de interactivdad y que estos sean implementados mediante CSS y JavaScript.\nEL HTML es un estándar del World Wide Web Consortium (W3C), un consorcio internacional creado por Tim Berners-Lee en 1994 que genera recomendaciones y estándares que aseguran el crecimiento de la WWW a largo plazo. La versión más reciente del estándar es HTML5 y se caracteriza por incluir soporte para los tipos más recientes de multimedios y reducir la necesidad de plataformas propietarias (ej. Adobe Flash) para su incorporación en páginas web que pueden desplegarse en diferentes tipos de dispositivos y tamaños de pantallas (computadoras, tabletas, teléfonos, pantallas gigantes, etc.).\nEl siguiente es un ejemplo de un documento HTML, el cual contiene, entre otras, etiquetas que especifican el lenguaje, el título y el cuerpo del documento, además de comentarios (que no son desplegados por el navegador web).",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>El Lenguaje de marcado de hipertexto (HTML)</span>"
    ]
  },
  {
    "objectID": "02-html.html#introducción",
    "href": "02-html.html#introducción",
    "title": "2  El Lenguaje de marcado de hipertexto (HTML)",
    "section": "",
    "text": "&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ejemplo de documento HTML&lt;/title&gt;     \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Comentario --&gt;\n    Contenido de documento HTML.\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>El Lenguaje de marcado de hipertexto (HTML)</span>"
    ]
  },
  {
    "objectID": "02-html.html#conceptos-básicos",
    "href": "02-html.html#conceptos-básicos",
    "title": "2  El Lenguaje de marcado de hipertexto (HTML)",
    "section": "2.2 Conceptos básicos",
    "text": "2.2 Conceptos básicos\n\n2.2.1 Elementos\nUn documento HTML está compuesto por elementos, como el que muestra en la Figura 2.1.\n\n\n\n\n\n\nFigura 2.1: Componentes de un elemento HTML. Fuente: MDN Web Docs.\n\n\n\nLos componentes de un elemento HTML son:\n\nLa etiqueta de apertura: consiste del nombre del elemento (en este caso p, correspondiente a un párrafo), encerrado por paréntesis angulares (&lt; &gt;) de apertura y cierre. Establece el inicio del elemento —en este caso, donde es el comienzo del párrafo—.\nEl contenido: este es el contenido del elemento, que en este caso es solamente texto. También pueden usarse imágenes, hipervínculos, direcciones web u otros elementos HTML.\nLa etiqueta de cierre: es similar que la etiqueta de apertura, pero incluye una barra de cierre (/) antes del nombre de la etiqueta. Establece el final del elemento —en este caso, en donde termina el párrafo—.\n\n\n\n2.2.2 Atributos\nLos elementos HTML pueden tener atributos, como el que se muestra en la Figura 2.2.\n\n\n\n\n\n\nFigura 2.2: Ejemplo de atributo de un elemento HTML. Fuente: MDN Web Docs.\n\n\n\nLos atributos proporcionan información adicional acerca del elemento, la cual no se despliega en su contenido. Los atributos se especifican en la etiqueta de apertura mediante la sintaxis nombre_atributo=valor. En la Figura 2.2, class es el nombre del atributo y editor-note su valor (class es un atributo que permite asociar al elemento con una clase o grupo de elementos, lo que puede ser útil para asignarles de manera conjunta estilos y otras propiedades). Si un elemento tiene varios atributos, deben separarse con (al menos) un espacio en blanco. Si el valor del atributo contiene espacios, debe encerrarse entre comillas dobles (““) o simples (’’). Se considera una buena práctica entrecomillar los valores de atributos aunque no contengan espacios, para mejorar la legibilidad.\nCada elemento tiene una lista de atributos que puede usar. Existen atributos globales, que pueden usarse en todos los elementos.\n\n\n2.2.3 Elementos anidados y elementos vacíos\nUn elemento HTML puede contener otros elementos. A estos elementos se les llama elementos anidados. Por ejemplo:\n&lt;p&gt;Mi gato es muy &lt;strong&gt;gruñón&lt;/strong&gt;&lt;/p&gt;\nEl elemento anterior también puede escribirse así:\n&lt;p&gt;\n    Mi gato es muy &lt;strong&gt;gruñón&lt;/strong&gt;\n&lt;/p&gt;\nLa tabulación es opcional, pero ayuda a mejorar la legibilidad. En ambos casos, el resultado es:\n\nMi gato es muy gruñón\n\nAlgunos elementos no tienen contenido, solamente atributos. Estos elementos se denominan elementos vacíos. Por ejemplo:\n&lt;img src=\"img/html-elemento-atributos.png\" alt=\"Atributo HTML\"&gt;\nComo puede observarse, el elemento img, el cual se usa para incluir una imagen, no tiene una etiqueta de cierre y, por lo tanto, no puede especificar contenido.\n\n\n2.2.4 Comentarios\nLas etiquetas &lt;!-- y --&gt; marcan el inicio y el final de cadenas de caracteres que no son interpretadas como código HTML por los navegadores web y, por lo tanto, no se despliegan. Estos “comentarios” pueden ser utilizados para explicar la lógica del documento HTML o realizar cualquier tipo de anotación. Como en el caso de los comentarios de los lenguajes de programación, se recomienda utilizar comentarios en HTML para facilitar la comprensión del código.\n&lt;!-- Esto es un comentario --&gt;\n&lt;p&gt;Esto es un párrafo.&lt;/p&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>El Lenguaje de marcado de hipertexto (HTML)</span>"
    ]
  },
  {
    "objectID": "02-html.html#principales-elementos",
    "href": "02-html.html#principales-elementos",
    "title": "2  El Lenguaje de marcado de hipertexto (HTML)",
    "section": "2.3 Principales elementos",
    "text": "2.3 Principales elementos\nA continuación, se describen y se ejemplifican algunos de los principales elementos de HTML.\n\n2.3.1 DOCTYPE\nDOCTYPE (tipo de documento) le informa al navegador web cual es la versión HTML de un documento. No es una etiqueta ni un elemento HTML. Más bien es una declaración que le permite al navegador saber como interpretar los elementos HTML que hay en el resto del documento. Se coloca al inicio del documento.\nLa siguiente etiqueta DOCTYPE especifica que el documento usa HTML5.\n&lt;!DOCTYPE html&gt;\n\n\n2.3.2 El elemento html\nEl elemento html es el elemento raíz de un documento y contiene el resto de los elementos.\nEl siguiente elemento html especifica el lenguaje del documento a través del atributo globlal lang.\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n\n2.3.3 El elemento head\nEl elemento head contiene los metadatos del documento y otros elementos como su título y referencias a scripts y hojas de estilo (CSS).\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Título del documento&lt;/title&gt;\n    \n    &lt;link rel=\"stylesheet\" href=\"css/estilos.css\"&gt;\n    &lt;script src=\"js/scripts.js\"&gt;&lt;/script&gt;        \n&lt;/head&gt;\n\n\n2.3.4 El elemento meta\nEl elemento meta especifica metadatos del documento tales como su autor, descripción, palabras clave y juego de caracteres, entre otros.\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"author\" content=\"Manuel Vargas\"&gt;\n&lt;meta name=\"description\" content=\"Curso introductorio de programación\"&gt;\n&lt;meta name=\"keywords\" content=\"Python, programación\"&gt;\n\n\n2.3.5 El elemento title\nEl elemento title especifica el título del documento, el cual se muestra en la parte superior de la ventana (o pestaña del navegador). Es un elemento obligatorio de todo documento HTML válido y debe estar ubicado dentro del elemento head.\n&lt;title&gt;Curso de programación en Python&lt;/title&gt;\n\n\n2.3.6 El elemento link\nlink especifica la relación entre el documento actual y un recurso externo, como una hoja de estilos.\nEnlace a la hoja de estilos de la biblioteca geoespacial Leaflet:\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" integrity=\"sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==\" crossorigin=\"\"/&gt;\n\n\n2.3.7 El elemento script\nEl elemento script se utiliza para incluir código de algún lenguaje de programación, típicamente JavaScript, aunque también usarse con otros lenguajes y sintaxis (ej. JSON).\nEnlace al código JavaScript de la biblioteca geoespacial Leaflet:\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" integrity=\"sha512XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==\" crossorigin=\"\"&gt;&lt;/script&gt;\n\n\n2.3.8 El elemento body\nbody especifica el contenido principal del documento (texto, multimedia, hipervínculos, etc.).\n&lt;body&gt;\n    &lt;a href=\"https://www.python.org/\"&gt;Python&lt;/a&gt; es un lenguaje de programación creado por Guido van Rossum.\n&lt;/body&gt;\n\n\n2.3.9 Los elementos h1 - h6\nLos elementos h1-h6 (h1, h2, h3, h4, h5, h6) definen encabezados (headings) de seis niveles. h1 es el encabezado de mayor nivel (con letras más grandes) y h6 el de menor nivel.\n&lt;h1&gt;Encabezado de nivel 1&lt;/h1&gt;\n&lt;h2&gt;Encabezado de nivel 2&lt;h2&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h2&gt;Encabezado de nivel 2&lt;h2&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\nSe visualiza así:\n\nEncabezado de nivel 1\n\n\nEncabezado de nivel 2\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 2\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 3\n\n\n\n2.3.10 El elemento p\nEl elemento p define un párrafo (i.e. texto o elementos HTML delimitados por líneas en blanco al principio y al final). La etiqueta de cierre es opcional. Una etiqueta &lt;p&gt; sola genera una línea en blanco.\n&lt;p&gt;Python es un lenguaje de programación de propósito general ...&lt;/p&gt;\n&lt;p&gt;Fue creado en 1989 por Guido van Rossum...&lt;/p&gt;\nSe visualiza así:\n\nPython es un lenguaje de programación de propósito general …\n\n\nFue creado en 1989 por Guido van Rossum…\n\n\n\n2.3.11 El elemento br\nEl elemento br (line break) genera un salto de línea (o “retorno de carro”) en el documento. No debe usarse para incrementar el espacio entre los parrafos. Para eso se recomienda utilizar el elemento p u hojas de estilo.\nMozilla Foundation&lt;br&gt;\n1981 Landings Drive&lt;br&gt;\nBuilding K&lt;br&gt;\nMountain View, CA 94043-0801&lt;br&gt;\nUSA\nSe visualiza así: Mozilla Foundation 1981 Landings Drive Building K Mountain View, CA 94043-0801 USA\n\n\n2.3.12 El elemento strong\nEl elemento strong se utiliza para denotar la importancia de una parte del texto. Los navegadores acostumbran usar letra en negrita para implementar este elemento. Sin embargo, no debe utilizarse para simplemente escribir un texto en negrita. Para eso, se recomienda emplear la propiedad font-weight de CSS.\n&lt;p&gt;\"... the most important rule, the rule you can never forget, no matter how much he cries, no matter how much he begs: &lt;strong&gt;never feed him after midnight&lt;/strong&gt;.\"&lt;/p&gt;\nSe visualiza así:\n\n“… the most important rule, the rule you can never forget, no matter how much he cries, no matter how much he begs: never feed him after midnight.”\n\nLos elementos semánticos (i.e que pretenden transmitir un significado) como strong y em facilitan la comprensión de textos por parte de personas y también programas. Por ejemplo, los lectores de pantalla pueden utilizar estos elementos para pronunciar las palabras con mayor fuerza o volumen.\n\n\n2.3.13 El elemento em\nem marca un fragmento de texto al que se se da un énfasis particular. Puede utilizarse de forma anidada, con cada nivel de anidamiento indicando un mayor grado de énfasis. Los navegadores acostumbran usar letra en itálica para implementar este elemento. Sin embargo, no debe utilizarse para simplemente escribir un texto en itálica. Para eso, se recomienda emplear la propiedad font-style de CSS.\n&lt;p&gt;Tenemos que &lt;em&gt;hacer&lt;/em&gt; algo al respecto.&lt;/p&gt;\nSe visualiza así:\n\nTenemos que hacer algo al respecto.\n\nLos elementos semánticos (i.e que pretenden transmitir un significado) como strong y em facilitan la comprensión de textos por parte de personas y también programas. Por ejemplo, los lectores de pantalla pueden utilizar estos elementos para pronunciar las palabras con mayor fuerza o volumen.\n\n\n2.3.14 El elemento a\nEl elemento a (anchor o ancla) crea un hipervínculo a otro documento HTML, a un archivo, a una dirección de email o a cualquier otro tipo de URL (Uniform Resource Locator o localizador de recursos uniforme). El atributo href especifica el URL. El contenido del elemento especifica el texto que se le muestra al usuario en el enlace.\n&lt;a href=\"https://www.python.org/\"&gt;El lenguaje de programación Python&lt;/a&gt;\nSe visualiza así: El lenguaje de programación Python\n\n\n2.3.15 El elemento img\nEl elemento img inserta una imagen en un documento. Solo usa la etiqueta de apertura. El atributo src especifica el URL de la imagen y el atributo alt una descripción textual de la imagen. Los atributos height y width especifican, en pixeles, la altura y el ancho de la imagen respectivamente.\n&lt;img src=\"img/python-logo.png\" alt=\"Logo de Python\" height=\"100\"&gt;\nSe visualiza así:\n\n\n\n2.3.16 El elemento ul\nul define una lista no ordenada cuyos ítems se especifican mediante el elemento li (list item).\n&lt;ul&gt;\n    &lt;li&gt;Azúcar&lt;/li&gt;\n    &lt;li&gt;Harina&lt;/li&gt;\n    &lt;li&gt;Limones&lt;/li&gt;\n    &lt;li&gt;Arroz&lt;/li&gt;\n&lt;/ul&gt;\nSe visualiza así:\n\n\nAzúcar\n\n\nHarina\n\n\nLimones\n\n\nArroz\n\n\n\n\n2.3.17 El elemento ol\nol define una lista ordenada cuyos ítems se especifican mediante el elemento li (list item).\n&lt;ol&gt;\n    &lt;li&gt;Azúcar&lt;/li&gt;\n    &lt;li&gt;Harina&lt;/li&gt;\n    &lt;li&gt;Limones&lt;/li&gt;\n    &lt;li&gt;Arroz&lt;/li&gt;\n&lt;/ol&gt;\nSe visualiza así:\n\n\nAzúcar\n\n\nHarina\n\n\nLimones\n\n\nArroz\n\n\n\n\n2.3.18 El elemento table\nEl elemento table se utiliza para presentar datos en filas y columnas. Los elementos thead y tbody especifican el encabezado y el cuerpo de la tabla, respectivamente. El elemento tr especifica las filas y td las columnas o las celdas. th se usa en las celdas de los encabezados.\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th colspan=\"2\"&gt;Encabezado de la tabla&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Fila 1,columna 1&lt;/td&gt;&lt;td&gt;Fila 1,columna 2&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Fila 2,columna 1&lt;/td&gt;&lt;td&gt;Fila 2,columna 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\nSe visualiza así:\n\n\n\n\nEncabezado de la tabla\n\n\n\n\n\n\nFila 1,columna 1\n\n\nFila 1,columna 2\n\n\n\n\nFila 2,columna 1\n\n\nFila 2,columna 2\n\n\n\n\n\n\n2.3.19 El elemento div\nEl elemento div se utiliza para definir secciones o agrupar contenidos en un documento.\nEn el ejemplo siguiente, div se emplea para asignar colores diferentes a dos partes de un documento:\n&lt;div style=\"background-color:#F00;\"&gt;\n    &lt;h1&gt;Sección roja&lt;/h1&gt;\n    &lt;p&gt;Esta sección tiene fondo rojo.&lt;/p&gt;\n&lt;/div&gt;\n&lt;div style=\"background-color:#0F0;\"&gt;\n    &lt;h1&gt;Sección verde&lt;/h1&gt;\n    &lt;p&gt;Esta sección tiene fondo verde.&lt;/p&gt;\n&lt;/div&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>El Lenguaje de marcado de hipertexto (HTML)</span>"
    ]
  },
  {
    "objectID": "02-html.html#recursos-adicionales",
    "href": "02-html.html#recursos-adicionales",
    "title": "2  El Lenguaje de marcado de hipertexto (HTML)",
    "section": "2.4 Recursos adicionales",
    "text": "2.4 Recursos adicionales\n\nHTML: Lenguaje de marcas de hipertexto | MDN\nHTML Tutorial | W3Schools\nThe W3C Markup Validation Service\n\n\n\n\nFigura 2.1: Componentes de un elemento HTML. Fuente: MDN Web Docs.\nFigura 2.2: Ejemplo de atributo de un elemento HTML. Fuente: MDN Web Docs.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>El Lenguaje de marcado de hipertexto (HTML)</span>"
    ]
  },
  {
    "objectID": "03-css.html",
    "href": "03-css.html",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "",
    "text": "3.1 Introducción\nHojas de Estilo en Cascada o CSS (siglas en inglés de Cascading Style Sheets) es un lenguaje de diseño gráfico para describir la presentación de un documento escrito en un lenguaje de marcado (ej. HTML). Permite especificar aspectos de diseño como colores, tipos y tamaños de letra, márgenes, alineamientos y muchos otros.\nCSS permite manejar la presentación separadamente del contenido, lo que brinda una mayor una flexibilidad en el diseño. Por ejemplo, varios archivos HTML pueden compartir una misma presentación al hacer referencia a un mismo archivo CSS. También posibilita un despliegue diferenciado de acuerdo a los tipos y tamaños de pantallas, en conjunto con HTML5.\nAl igual que HTML, CSS es un estándar de W3C. Fue propuesto por Håkon Wium Lie, quien trabajaba en CERN con Tim Berners-Lee, en 1994.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#introducción",
    "href": "03-css.html#introducción",
    "title": "3  El Lenguaje de hojas de estilo en cascada (CSS)",
    "section": "",
    "text": "&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ejemplo de documento HTML&lt;/title&gt;     \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Comentario --&gt;\n    Contenido de documento HTML.\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El Lenguaje de hojas de estilo en cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#conceptos-básicos",
    "href": "03-css.html#conceptos-básicos",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "3.3 Conceptos básicos",
    "text": "3.3 Conceptos básicos\n\n3.3.1 Reglas CSS\nLas hojas de estilo se basan en reglas CSS, como la que se muestra en la Figura 3.1.\n\n\n\n\n\n\nFigura 3.1: Componentes de una regla CSS. Fuente: MDN Web Docs.\n\n\n\nLos componentes de una regla CSS son:\n\nEl selector: es el elemento, o elementos HTML, para los que aplica la regla.\nLa propiedad: es la característica del elemento HTML (ej. color, tamaño, tipo de letra) a la que se desea aplicar el estilo.\nEl valor de la propiedad: es el valor que se le asigna a la propiedad (ej. rojo, azul, etc. para el color).\nLa declaración: es la combinación de propiedad y valor de la propiedad.\n\nEntre las llaves ({}) pueden especificarse varias declaraciones, las cuales deben separarse con punto y coma (;). Aún cuando haya solo una declaración, se recomienda usar el punto y coma, por legibilidad.\nLos siguientes son ejemplos de reglas CSS:\np {\n    color:red;\n}\n\nbody {\n    background-color:black;\n    color:white;\n    font-family:Arial;\n    margin:0 4px 0 0;\n    border:12px solid;\n}\n\nh1,h2 {\n    color:blue;\n    background-color:yellow;\n}\nPueden encontrarse listas y ejemplos de uso de las propiedades CSS en:\n\nCSS Reference - MDN\nCSS Reference - W3 Schools\n\n\n3.3.1.1 Especificación de reglas y propiedades CSS\nUn navegador web busca reglas y propiedades CSS en el siguiente orden de prioridad:\n\nEn su configuración por defecto.\nEn archivos CSS (.css).\nEn el elemento style.\nEn elementos HTML individuales (ej. body, h1, table, …).\n\n\n3.3.1.1.1 En elementos HTML individuales\nSe hace a través del atributo global style, como en el siguiente ejemplo:\n&lt;h1 style=\"color:blue;\"&gt;Encabezado estilizado&lt;/h1&gt;\nEsta forma no separa el contenido del estilo por lo que, en general, no es recomendada.\n\n\n3.3.1.1.2 En el elemento style\nEl elemento style se ubica, por lo general, dentro del elemento head.\n&lt;head&gt;\n    &lt;title&gt;Ejemplo de reglas CSS especificadas en el elemento &lt;style&gt;&lt;/title&gt;\n    &lt;style&gt;\n        h1 {\n            color:blue;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n\n3.3.1.1.3 En archivos CSS (.css)\nEn la sección head del archivo HTML que va a usar los estilos, debe incluirse un elemento de tipo link, como se ejemplifica seguidamente:\n&lt;link rel=\"stylesheet\" href=\"css/estilos.css\"&gt;\nEjemplo de contenido de css/estilos.css:\np {\n    color:red;\n    font-size:200%;\n}\n\nh1 {\n    background-color:yellow;\n}  \n\nbody {\n    background-color:black;\n    color:white;\n    margin:0 4px 0 0;\n    border:12px solid;\n}\n\n\n\n\n3.3.2 Categorías de selectores\n\n3.3.2.1 Selectores de tipo\nAplican para todos los elementos HTML de cierto tipo (ej. h1, h2, p, table).\nCódigo CSS\np {\n    color:blue;\n}\nCódigo HTML\n&lt;p&gt;\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi non consequat augue, vel condimentum velit\n&lt;/p&gt;\n\n\n3.3.2.2 Selectores de clase\nAplican para elementos HTML con un valor específico en el atributo class. En la sintaxis de CSS, los selectores de clase se definen con un punto (.) seguido del nombre de la clase.\nCódigo CSS\nSe definen la clase “azul” y la clase “rojo”.\n.azul {\n    color:blue;\n}\n\n.rojo {\n    color:red;\n}\nCódigo HTML\nSe aplican las clases “azul” y “rojo” en varios elementos HTML.\n&lt;p class=\"rojo\"&gt;\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at lacus nibh. Mauris volutpat malesuada ultrices.\n&lt;/p&gt;\n\n&lt;p class=\"azul\"&gt;\n    Ut aliquet nulla a ornare laoreet. Cras sed eros faucibus, dignissim odio quis, dictum ante. Proin hendrerit lacinia lectus et condimentum.\n&lt;/p&gt;\n\n&lt;p class=\"rojo\"&gt;\n    Phasellus commodo velit quam, et gravida felis molestie et. Quisque luctus cursus euismod. Aenean semper pellentesque dolor.\n&lt;/p&gt;\n\n\n3.3.2.3 Selectores de ID\nAplican para el elemento que posea un valor específico en el atributo id. Estos selectores se denotan por un signo de numeral (#) seguido por el id del elemento.\nCódigo CSS\nSe definen las clases “arial” y “times”.\n#arial {\n    font-family: Arial;\n}\n\n#times {\n    font-family: Times;\n}\nCódigo HTML\nSe aplican las clases “arial” y “times” en varios elementos HTML.\n&lt;p id=\"arial\"&gt;\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at lacus nibh. Mauris volutpat malesuada ultrices.\n&lt;/p&gt;\n\n&lt;p id=\"times\"&gt;\n    Ut aliquet nulla a ornare laoreet. Cras sed eros faucibus, dignissim odio quis, dictum ante. Proin hendrerit lacinia lectus et condimentum.\n&lt;/p&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#principales-elementos",
    "href": "03-css.html#principales-elementos",
    "title": "3  El Lenguaje de hojas de estilo en cascada (CSS)",
    "section": "3.3 Principales elementos",
    "text": "3.3 Principales elementos\nA continuación, se describen y se ejemplifican algunos de los principales elementos de HTML.\n\n3.3.1 DOCTYPE\nDOCTYPE (tipo de documento) le informa al navegador web cual es la versión HTML de un documento. No es una etiqueta ni un elemento HTML. Más bien es una declaración que le permite al navegador saber como interpretar los elementos HTML que hay en el resto del documento. Se coloca al inicio del documento.\nLa siguiente etiqueta DOCTYPE especifica que el documento usa HTML5.\n&lt;!DOCTYPE html&gt;\n\n\n3.3.2 El elemento html\nEl elemento html es el elemento raíz de un documento y contiene el resto de los elementos.\nEl siguiente elemento html especifica el lenguaje del documento a través del atributo globlal lang.\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n\n3.3.3 El elemento head\nEl elemento head contiene los metadatos del documento y otros elementos como su título y referencias a scripts y hojas de estilo (CSS).\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Título del documento&lt;/title&gt;\n    \n    &lt;link rel=\"stylesheet\" href=\"css/estilos.css\"&gt;\n    &lt;script src=\"js/scripts.js\"&gt;&lt;/script&gt;        \n&lt;/head&gt;\n\n\n3.3.4 El elemento meta\nEl elemento meta especifica metadatos del documento tales como su autor, descripción, palabras clave y juego de caracteres, entre otros.\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"author\" content=\"Manuel Vargas\"&gt;\n&lt;meta name=\"description\" content=\"Curso introductorio de programación\"&gt;\n&lt;meta name=\"keywords\" content=\"Python, programación\"&gt;\n\n\n3.3.5 El elemento title\nEl elemento title especifica el título del documento, el cual se muestra en la parte superior de la ventana (o pestaña del navegador). Es un elemento obligatorio de todo documento HTML válido y debe estar ubicado dentro del elemento head.\n&lt;title&gt;Curso de programación en Python&lt;/title&gt;\n\n\n3.3.6 El elemento link\nlink especifica la relación entre el documento actual y un recurso externo, como una hoja de estilos.\nEnlace a la hoja de estilos de la biblioteca geoespacial Leaflet:\n&lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" integrity=\"sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==\" crossorigin=\"\"/&gt;\n\n\n3.3.7 El elemento script\nEl elemento script se utiliza para incluir código de algún lenguaje de programación, típicamente JavaScript, aunque también usarse con otros lenguajes y sintaxis (ej. JSON).\nEnlace al código JavaScript de la biblioteca geoespacial Leaflet:\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" integrity=\"sha512XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==\" crossorigin=\"\"&gt;&lt;/script&gt;\n\n\n3.3.8 El elemento body\nbody especifica el contenido principal del documento (texto, multimedia, hipervínculos, etc.).\n&lt;body&gt;\n    &lt;a href=\"https://www.python.org/\"&gt;Python&lt;/a&gt; es un lenguaje de programación creado por Guido van Rossum.\n&lt;/body&gt;\n\n\n3.3.9 Los elementos h1 - h6\nLos elementos h1-h6 (h1, h2, h3, h4, h5, h6) definen encabezados (headings) de seis niveles. h1 es el encabezado de mayor nivel (con letras más grandes) y h6 el de menor nivel.\n&lt;h1&gt;Encabezado de nivel 1&lt;/h1&gt;\n&lt;h2&gt;Encabezado de nivel 2&lt;h2&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h2&gt;Encabezado de nivel 2&lt;h2&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\n&lt;h3&gt;Encabezado de nivel 3&lt;/h3&gt;\nSe visualiza así:\n\nEncabezado de nivel 1\n\n\nEncabezado de nivel 2\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 2\n\n\nEncabezado de nivel 3\n\n\nEncabezado de nivel 3\n\n\n\n3.3.10 El elemento p\nEl elemento p define un párrafo (i.e. texto o elementos HTML delimitados por líneas en blanco al principio y al final). La etiqueta de cierre es opcional. Una etiqueta &lt;p&gt; sola genera una línea en blanco.\n&lt;p&gt;Python es un lenguaje de programación de propósito general ...&lt;/p&gt;\n&lt;p&gt;Fue creado en 1989 por Guido van Rossum...&lt;/p&gt;\nSe visualiza así:\n\nPython es un lenguaje de programación de propósito general …\n\n\nFue creado en 1989 por Guido van Rossum…\n\n\n\n3.3.11 El elemento br\nEl elemento br (line break) genera un salto de línea (o “retorno de carro”) en el documento. No debe usarse para incrementar el espacio entre los parrafos. Para eso se recomienda utilizar el elemento p u hojas de estilo.\nMozilla Foundation&lt;br&gt;\n1981 Landings Drive&lt;br&gt;\nBuilding K&lt;br&gt;\nMountain View, CA 94043-0801&lt;br&gt;\nUSA\nSe visualiza así: Mozilla Foundation 1981 Landings Drive Building K Mountain View, CA 94043-0801 USA\n\n\n3.3.12 El elemento strong\nEl elemento strong se utiliza para denotar la importancia de una parte del texto. Los navegadores acostumbran usar letra en negrita para implementar este elemento. Sin embargo, no debe utilizarse para simplemente escribir un texto en negrita. Para eso, se recomienda emplear la propiedad font-weight de CSS.\n&lt;p&gt;\"... the most important rule, the rule you can never forget, no matter how much he cries, no matter how much he begs: &lt;strong&gt;never feed him after midnight&lt;/strong&gt;.\"&lt;/p&gt;\nSe visualiza así:\n\n“… the most important rule, the rule you can never forget, no matter how much he cries, no matter how much he begs: never feed him after midnight.”\n\nLos elementos semánticos (i.e que pretenden transmitir un significado) como strong y em facilitan la comprensión de textos por parte de personas y también programas. Por ejemplo, los lectores de pantalla pueden utilizar estos elementos para pronunciar las palabras con mayor fuerza o volumen.\n\n\n3.3.13 El elemento em\nem marca un fragmento de texto al que se se da un énfasis particular. Puede utilizarse de forma anidada, con cada nivel de anidamiento indicando un mayor grado de énfasis. Los navegadores acostumbran usar letra en itálica para implementar este elemento. Sin embargo, no debe utilizarse para simplemente escribir un texto en itálica. Para eso, se recomienda emplear la propiedad font-style de CSS.\n&lt;p&gt;Tenemos que &lt;em&gt;hacer&lt;/em&gt; algo al respecto.&lt;/p&gt;\nSe visualiza así:\n\nTenemos que hacer algo al respecto.\n\nLos elementos semánticos (i.e que pretenden transmitir un significado) como strong y em facilitan la comprensión de textos por parte de personas y también programas. Por ejemplo, los lectores de pantalla pueden utilizar estos elementos para pronunciar las palabras con mayor fuerza o volumen.\n\n\n3.3.14 El elemento a\nEl elemento a (anchor o ancla) crea un hipervínculo a otro documento HTML, a un archivo, a una dirección de email o a cualquier otro tipo de URL (Uniform Resource Locator o localizador de recursos uniforme). El atributo href especifica el URL. El contenido del elemento especifica el texto que se le muestra al usuario en el enlace.\n&lt;a href=\"https://www.python.org/\"&gt;El lenguaje de programación Python&lt;/a&gt;\nSe visualiza así: El lenguaje de programación Python\n\n\n3.3.15 El elemento img\nEl elemento img inserta una imagen en un documento. Solo usa la etiqueta de apertura. El atributo src especifica el URL de la imagen y el atributo alt una descripción textual de la imagen. Los atributos height y width especifican, en pixeles, la altura y el ancho de la imagen respectivamente.\n&lt;img src=\"img/python-logo.png\" alt=\"Logo de Python\" height=\"100\"&gt;\nSe visualiza así:\n\n\n\n3.3.16 El elemento ul\nul define una lista no ordenada cuyos ítems se especifican mediante el elemento li (list item).\n&lt;ul&gt;\n    &lt;li&gt;Azúcar&lt;/li&gt;\n    &lt;li&gt;Harina&lt;/li&gt;\n    &lt;li&gt;Limones&lt;/li&gt;\n    &lt;li&gt;Arroz&lt;/li&gt;\n&lt;/ul&gt;\nSe visualiza así:\n\n\nAzúcar\n\n\nHarina\n\n\nLimones\n\n\nArroz\n\n\n\n\n3.3.17 El elemento ol\nol define una lista ordenada cuyos ítems se especifican mediante el elemento li (list item).\n&lt;ol&gt;\n    &lt;li&gt;Azúcar&lt;/li&gt;\n    &lt;li&gt;Harina&lt;/li&gt;\n    &lt;li&gt;Limones&lt;/li&gt;\n    &lt;li&gt;Arroz&lt;/li&gt;\n&lt;/ol&gt;\nSe visualiza así:\n\n\nAzúcar\n\n\nHarina\n\n\nLimones\n\n\nArroz\n\n\n\n\n3.3.18 El elemento table\nEl elemento table se utiliza para presentar datos en filas y columnas. Los elementos thead y tbody especifican el encabezado y el cuerpo de la tabla, respectivamente. El elemento tr especifica las filas y td las columnas o las celdas. th se usa en las celdas de los encabezados.\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th colspan=\"2\"&gt;Encabezado de la tabla&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Fila 1,columna 1&lt;/td&gt;&lt;td&gt;Fila 1,columna 2&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Fila 2,columna 1&lt;/td&gt;&lt;td&gt;Fila 2,columna 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\nSe visualiza así:\n\n\n\n\nEncabezado de la tabla\n\n\n\n\n\n\nFila 1,columna 1\n\n\nFila 1,columna 2\n\n\n\n\nFila 2,columna 1\n\n\nFila 2,columna 2\n\n\n\n\n\n\n3.3.19 El elemento div\nEl elemento div se utiliza para definir secciones o agrupar contenidos en un documento.\nEn el ejemplo siguiente, div se emplea para asignar colores diferentes a dos partes de un documento:\n&lt;div style=\"background-color:#F00;\"&gt;\n    &lt;h1&gt;Sección roja&lt;/h1&gt;\n    &lt;p&gt;Esta sección tiene fondo rojo.&lt;/p&gt;\n&lt;/div&gt;\n&lt;div style=\"background-color:#0F0;\"&gt;\n    &lt;h1&gt;Sección verde&lt;/h1&gt;\n    &lt;p&gt;Esta sección tiene fondo verde.&lt;/p&gt;\n&lt;/div&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El Lenguaje de hojas de estilo en cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#recursos-adicionales",
    "href": "03-css.html#recursos-adicionales",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "3.5 Recursos adicionales",
    "text": "3.5 Recursos adicionales\n\nCSS - Aprende desarrollo web | MDN\nCSS Tutorial | W3Schools\n\n\n\n\nFigura 3.1: Componentes de una regla CSS. Fuente: MDN Web Docs.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#ejemplos-de-uso-de-css",
    "href": "03-css.html#ejemplos-de-uso-de-css",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "3.2 Ejemplos de uso de CSS",
    "text": "3.2 Ejemplos de uso de CSS\n\nCSS Zen Garden: The Beauty of CSS Design\nEn CodePen: Intro Front-End Holy Trinity",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#reglas-css",
    "href": "03-css.html#reglas-css",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "4.1 Reglas CSS",
    "text": "4.1 Reglas CSS\nLas hojas de estilo se basan en reglas CSS, como la que se muestra en la Figura 4.1.\n\n\n\n\n\n\nFigura 4.1: Componentes de una regla CSS. Fuente: MDN Web Docs.\n\n\n\nLos componentes de una regla CSS son:\n\nEl selector: es el elemento, o elementos HTML, para los que aplica la regla.\nLa propiedad: es la característica del elemento HTML (ej. color, tamaño, tipo de letra) a la que se desea aplicar el estilo.\nEl valor de la propiedad: es el valor que se le asigna a la propiedad (ej. rojo, azul, etc. para el color).\nLa declaración: es la combinación de propiedad y valor de la propiedad.\n\nEntre las llaves ({}) pueden especificarse varias declaraciones, las cuales deben separarse con punto y coma (;). Aún cuando haya solo una declaración, se recomienda usar el punto y coma, por legibilidad.\nLos siguientes son ejemplos de reglas CSS:\np {\n    color:red;\n}\n\nbody {\n    background-color:black;\n    color:white;\n    font-family:Arial;\n    margin:0 4px 0 0;\n    border:12px solid;\n}\n\nh1,h2 {\n    color:blue;\n    background-color:yellow;\n}\nPueden encontrarse listas y ejemplos de uso de las propiedades CSS en: - CSS Reference - MDN - CSS Reference - W3 Schools\n\n\n\nFigura 4.1: Componentes de una regla CSS. Fuente: MDN Web Docs.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "03-css.html#ejercicios",
    "href": "03-css.html#ejercicios",
    "title": "3  El lenguaje Hojas de Estilo en Cascada (CSS)",
    "section": "3.4 Ejercicios",
    "text": "3.4 Ejercicios\n\nCon HTML y CSS, cree un sitio web sobre su hoja de vida (puede escoger otro tema). Puede utilizar información real o ficticia. El sitio debe tener al menos tres páginas:\n\nPrincipal (index.html): información personal como nombre, dirección, correo electrónico, resumen de experiencia laboral, resumen de historial académico, fotografía. Debe contener enlaces a las otras páginas del sitio.\nExperiencia laboral: puestos ocupados, proyectos en los que ha participado, etc. . Historial académico: títulos obtenidos, universidades, etc.\n\nEscriba el contenido y la estructura de cada página en HTML.\nEscriba un archivo CSS con estilos para el sitio web y aplíquelos en cada página del sitio.\nPublique su sitio en GitHub Pages.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>El lenguaje Hojas de Estilo en Cascada (CSS)</span>"
    ]
  },
  {
    "objectID": "04-js.html",
    "href": "04-js.html",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "",
    "text": "4.1 Introducción\nJavaScript (JS) es un lenguaje de programación que se utiliza para añadir interactividad a las páginas web. Junto con HTML y CSS, es una de las tres principales tecnologías para la producción de contenido en la Web. Fue creado en 1995 por Brendan Eich, con el fin de dar interactividad a las páginas web leídas con el navegador Netscape Navigator. En la actualidad, es utilizado por todos los principales navegadores web y en la mayoría de los sitios web.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#principales-características",
    "href": "04-js.html#principales-características",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "4.2 Principales características",
    "text": "4.2 Principales características\n\nPuede ejecutarse en el cliente (i.e. navegador web) o en el servidor.\nEs un lenguaje interpretado.\nSoporta varios paradigmas de programación, incluyendo la programación orientada a objetos.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#qué-puede-hacerse-con-javascript",
    "href": "04-js.html#qué-puede-hacerse-con-javascript",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "4.3 ¿Qué puede hacerse con JavaScript?",
    "text": "4.3 ¿Qué puede hacerse con JavaScript?\n\nControlar multimedia (ej. imágenes, videos, sonidos).\nReaccionar a “eventos” (ej. presionar un botón).\nModificar dinámicamente el contenido de una página web.\nManejar mapas interactivos.\nY muchas otras cosas más…",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#el-programa-hola-mundo-en-javascript",
    "href": "04-js.html#el-programa-hola-mundo-en-javascript",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "4.4 El programa “Hola mundo” en JavaScript",
    "text": "4.4 El programa “Hola mundo” en JavaScript\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hola mundo&lt;/title&gt;\n        &lt;meta charset=\"UTF-8\"&gt; \n        &lt;script&gt;\n            /* Función que imprime \"Hola mundo\" en una ventana de alerta */\n            function holaMundo () {\n                alert(\"Hola mundo\");\n            }        \n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button type=\"button\" onclick=\"holaMundo()\"&gt;\n            Presióneme\n        &lt;/button&gt;        \n    &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#el-elemento-script-de-html",
    "href": "04-js.html#el-elemento-script-de-html",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "5.1 El elemento script de HTML",
    "text": "5.1 El elemento script de HTML\nEl elemento script se utiliza para incluir código de algún lenguaje de programación, típicamente JavaScript, aunque también usarse con otros lenguajes y sintaxis (ej. JSON).\nEjemplos de diferentes formas de incluir código JS en un documento HTML:\n&lt;!-- Código escrito directamente --&gt;\n&lt;script&gt;\n    /* Función que imprime la hilera \"Hola mundo\" */\n    function holaMundo () {\n        alert(\"¡Hola mundo!\");\n    }        \n&lt;/script&gt;\n\n&lt;!-- Inclusión de un archivo local --&gt;\n&lt;script src=\"js/misfunciones.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Inclusión de un archivo remoto --&gt;\n&lt;script src=\"https://maps.googleapis.com/maps/api/js\"&gt;&lt;/script&gt; \n\n&lt;!-- Inclusión de un archivo remoto con verificación de integridad --&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" integrity=\"sha512XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==\" crossorigin=\"\"&gt;&lt;/script&gt;",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#sintaxis-de-javascript",
    "href": "04-js.html#sintaxis-de-javascript",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "5.2 Sintaxis de JavaScript",
    "text": "5.2 Sintaxis de JavaScript\n\n5.2.1 Comentarios\nPara varias líneas:\n/* Este es un\n   comentario de\n   varias líneas \n*/\nPara una línea:\nvar i = 1; // contador inicializado en 1       \nvar j = 2; // contador inicializado en 2 \n\n\n5.2.2 Declaración e inicialización de variables\nSe declaran con la palabra reservada var y se inicializan con el operador =.\nvar lenguaje;\nvar numeroAureo, pi;\nvar esBisiesto = false;                                \n\nlenguaje = \"JavaScript\";\nnumeroAureo = 1.61803, pi = 3.14;\nEl operador = se usa también para actualizar los valores de las variables, después de inicializarlas.\n\n\n5.2.3 Tipos de datos\n\n5.2.3.1 Numéricos\nIncluye números tanto enteros como decimales.\nvar cantidadEstudiantes = 12;\nvar pi = 3.14;\n\nx1 = 1, x2 = 2, x3 = 4, x3 = 8, x4 = 16;\n\nsuma = 10 + 20; resta = 20 - 2;\nmultiplicacion = 2 * 3; divison = 2.4 * 4.7;\n\ni = 10; j = 20;\ni++; // Resultado: 11\nj--; // Resultado: 19\n\n\n5.2.3.2 Textuales\nSon hileras de texto escritas entre comillas simples o dobles.\nvar continente = \"América\";\nvar pais = \"Costa Rica\", provincia = 'Heredia';\n\ncita = \"'Pienso, por lo tanto existo', (René Descarte, 1637)\";\n\nnombreCompleto = \"John\" + \" \" + \"Doe\"; // resultado: \"John Doe\"   \n\n\n5.2.3.3 Booleanos\nTienen dos posibles valores: verdadero (true) o falso (false).\nvar esBisiesto = true;\nvar esLunes = false;\n\n// \"Y\" lógico (AND)\n2 &gt; 1 && 2 == (1 + 1); // Resultado: true;\n\n// \"O\" lógico (OR)\n1 &gt; 2 || 4 &lt; 3; // Resultado: false;\n\n// \"No\" lógico (NOT)\n!(2 &gt; 1); // Resultado: false;\n\n\n5.2.3.4 Arreglos (arrays)\nSus elementos se separan con comas y se encierran entre paréntesis cuadrados ([]). Sus índices (i.e. posiciones) comienzan en 0.\nvar nombres = ['Carlos', 'Lucía', 'Jorge'];\nvar numeros = [20, 9, 10.3];\n\nnombres[0]; // Resultado: 'Carlos'\nnumeros[2]; // Resultado: 10.3\n\n\n5.2.3.5 Objetos\nSon estructuras compuestas por listas de tuplas de la forma propiedad:valor.\nvar perro = {nombre:'Lassie', raza:'Collie', sexo:'Femenino', edad:7 };       \n\nperro.nombre; // Resultado: 'Lassie'\nperro.edad; // Resultado: 7\n\n\n\n5.2.4 Funciones\nDeclaración\nfunction [nombre-función] ([arg1], [arg2], ..., [argn]) {       \n  [cuerpo-función]\n  \n  return [valor-retorno]\n}\nEjemplo\nfunction cuadrado (numero) {\n  c = numero * numero;\n  \n  return c;\n}\n\ncantidad = cuadrado(8);\n\n\n5.2.5 Condicionales\n\n5.2.5.1 if\nSintaxis\nif ([condición]) {\n  [código a ejecutarse si la condición es verdadera];       \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n}\n\n\n5.2.5.2 if - else\nSintaxis\nif ([condición]) {\n  [código a ejecutarse si la condición es verdadera];       \n} else {\n  [código a ejecutarse si la condición es falsa];       \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n} else {\n  alert(\"x es mayor o igual que y\");\n}\n\n\n5.2.5.3 if - else if - else\nSintaxis\nif ([condición-1]) {\n  [código a ejecutarse si la condición-1 es verdadera];\n} else if [condición-n]{\n  [código a ejecutarse si la condición-n es verdadera];\n} else {\n  [código a ejecutarse si todas las condiciones son falsas];        \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n} else if (x &gt; y) {\n  alert(\"x es mayor que y\");\n} else {\n  alert(\"x es igual a y\");\n}\n\n\n5.2.5.4 switch\nSintaxis\nswitch ([expresión]) {\n  case [opción-1]:\n    [código a ejecutarse para la opción-1]\n    break;\n  case [opción-n]:\n    [código a ejecutarse para la opción-n]\n    break;\n  default:\n    [código a ejecutarse si no se cumple ninguna opción]\n}\nbreak detiene la ejecución e impide que las otras opciones sean evaluadas.\nEjemplo\ncodigoMes = 1;\nswitch (codigoMes) {\n  case 1:\n    nombreMes = \"Enero\";\n    break;\n  case 2:\n    nombreMes = \"Febrero\";\n    break;\n  case 3:\n    nombreMes = \"Marzo\";\n    break;                        \n  default:\n    nombreMes = \"Otro\";\n}\nalert(nombreMes);\n\n\n\n5.2.6 Ciclos\n\n5.2.6.1 for\nSintaxis\nfor ([expresión-inicial];[condición]; [expresión-incremento]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]\nfor (i = 1; i &lt;= 3; i++) {          \n  alert(i * i);\n}\n\n\n5.2.6.2 while\nSintaxis\nwhile ([condición]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]           \nvar i = 1;\nwhile (i &lt;= 3) {          \n  alert(i * i);\n}\n\n\n5.2.6.3 for.. in\nSintaxis\nfor ([variable] in [objeto]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los valores de las propiedades de un objeto\nvar perro = {nombre:'Lassie', raza:'Collie', sexo:'Femenino', edad:7 };           \nfor (i in perro) {          \n  alert(perro[i]);\n  i++;\n}\n\n\n5.2.6.4 do .. while\nSintaxis\ndo {          \n  [cuerpo-ciclo]\n} while ([condición]);\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]           \nvar i = 1;\ndo {          \n  alert(i * i);\n  i++;\n} while (i &lt;= 3);",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "04-js.html#ejercicios",
    "href": "04-js.html#ejercicios",
    "title": "4  El lenguaje de programación JavaScript (JS)",
    "section": "5.3 Ejercicios",
    "text": "5.3 Ejercicios\nImplemente las siguientes funciones el JavaScript. En el código HTML, implemente para cada una un botón que realice llamados de prueba e imprima los resultados con alert().\n\nUna función que reciba una hilera con un nombre y retorne “Hola”+nombre (ej. “Hola Manuel”).\nUna función que reciba un número y retorne su cuadrado.\nUna función que reciba un número, correspondiente a la edad de una persona, y retorne una hilera indicando si la persona es menor de edad (&lt; 18), adulto (&gt;= 18 y &lt; 65) o adulto mayor (&gt;= 65).\nUna función que reciba un arreglo de números y retorne el promedio de esos números.\nUna función que reciba un arreglo de números y retorne la suma de los cuadrados de esos números.",
    "crumbs": [
      "I - Lenguajes básicos para desarrollo de SIG en la Web",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>El lenguaje de programación JavaScript (JS)</span>"
    ]
  },
  {
    "objectID": "parte-iv-evaluaciones.html",
    "href": "parte-iv-evaluaciones.html",
    "title": "Evaluaciones",
    "section": "",
    "text": "Tareas\nTarea 1\nTarea 2",
    "crumbs": [
      "Evaluaciones"
    ]
  },
  {
    "objectID": "tarea-01.html",
    "href": "tarea-01.html",
    "title": "Tarea 1",
    "section": "",
    "text": "Fecha y hora límite de entrega",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#fecha-y-hora-límite-de-entrega",
    "href": "tarea-01.html#fecha-y-hora-límite-de-entrega",
    "title": "Tarea 1",
    "section": "",
    "text": "Grupo 001\nMartes 16 de abril de 2024, 04:59 p.m.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#objetivos",
    "href": "tarea-01.html#objetivos",
    "title": "Tarea 1",
    "section": "Objetivos",
    "text": "Objetivos\nCada estudiante debe mostrar que es capaz de:\n\nEscribir documentos en el lenguaje de marcado HTML.\nAplicar estilos a los documentos HTML con el lenguaje CSS.\nPublicar repositorios de GitHub como sitios web en GitHub Pages.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#entregables",
    "href": "tarea-01.html#entregables",
    "title": "Tarea 1",
    "section": "Entregables",
    "text": "Entregables\n\nDirección de un repositorio en GitHub (ej. https://github.com/mfvargas/tarea-01) con archivos HTML y CSS con el contenido especificado en la sección Desarrollo.\nDirección de un sitio web publicado en GitHub Pages generado a partir del repositorio especificado en el punto anterior (ej. https://mfvargas.github.io/tarea-01/). Se recomienda usar un nombre más significativo que tarea-01 para el repositorio, acorde con su contenido.\n\nLa entrega debe realizarse a través de la plataforma Mediación Virtual.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#consideraciones-adicionales",
    "href": "tarea-01.html#consideraciones-adicionales",
    "title": "Tarea 1",
    "section": "Consideraciones adicionales",
    "text": "Consideraciones adicionales\nEsta tarea es estrictamente individual.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#desarrollo",
    "href": "tarea-01.html#desarrollo",
    "title": "Tarea 1",
    "section": "Desarrollo",
    "text": "Desarrollo\nDebe desarrollar, con HTML y CSS, un sitio web sobre un tema de su elección (un adelanto del trabajo final de graduación, alguna temática tratada en otro curso, un proyecto personal, etc.). El sitio debe contener, como mínimo, los siguientes elementos:\n\nAl menos dos documentos HTML (el principal debe llamarse index.html).\nUn documento CSS que defina estilos para todos los documentos HTML.\nContenido (por lo menos 500 palabras en cada documento HTML). Debe estar estructurado (ej. con encabezados, secciones, artículos), contener hipervínculos y al menos una imagen por documento. Los documentos HTML deben contar con una barra de navegación para navegar a través del sitio.\nEstilos. Al menos deben especificarse estilos para el color del fondo del cuerpo de los documentos, el tipo de letra, el tamaño de letra y la barra de navegación.\n\nPuede utilizar contenido (ej. texto, imágenes) de fuentes externas, pero debe dar los créditos apropiados (proporcionar la cita bibliográfica o al menos un enlace a la fuente). Puede utilizar el contenido de la tarea 1 del curso PF-0907 Programación en SIG 2023-II.\nEl contenido del sitio debe ser coherente y estar bien presentado.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "tarea-01.html#calificación",
    "href": "tarea-01.html#calificación",
    "title": "Tarea 1",
    "section": "Calificación",
    "text": "Calificación\nEntre paréntesis, se muestra el porcentaje correspondiente a cada aspecto que se calificará:\nCoherencia y presentación general del sitio web (10%).\nRevisión de las direcciones entregadas:\n\nDirección del repositorio en GitHub (5%).\nDirección del sitio web publicado en GitHub Pages (5%).\n\nRevisión de los elementos del documento escrito en Markdown:\n\nContenido (40%).\nEstilos (40%).",
    "crumbs": [
      "Evaluaciones",
      "Tarea 1"
    ]
  },
  {
    "objectID": "parte-ii-leaflet.html",
    "href": "parte-ii-leaflet.html",
    "title": "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
    "section": "",
    "text": "5 Leaflet - conceptos básicos\n6 Leaflet - manejo de capas vectoriales\n7 Leaflet - mapas con capas de coropletas, puntos agrupados y calor\n8 Leaflet - mapas con capas raster 9 Leaflet - mapas con capas WMS y WFS",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos"
    ]
  },
  {
    "objectID": "05-leaflet.html",
    "href": "05-leaflet.html",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "",
    "text": "5.1 Introducción\nLeaflet es una biblioteca de programación en JavaScript para hacer mapas en la Web. Es de código abierto y fue diseñada para funcionar en una gran variedad de dispositivos, incluyendo móviles (ej. celulares, tabletas). Su funcionalidad puede ser extendida a través de complementos. Su primera versión fue publicada en 2011 por Vladimir Agafonkin. Junto con OpenLayers y Google Maps, es una de las más bibliotecas más populares para programar mapas en la Web.\nEl código JavaScript de Leaflet se invoca desde documentos en Lenguaje de Marcas de hipertexto (HTML). Su código fuente se distribuye junto con un conjunto de Hojas de Estilo en Cascada (CSS).",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#principales-características",
    "href": "05-leaflet.html#principales-características",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.2 Principales características",
    "text": "5.2 Principales características\n\nPuede ejecutarse en el cliente (i.e. navegador web) o en el servidor.\nEs un lenguaje interpretado.\nSoporta varios paradigmas de programación, incluyendo la programación orientada a objetos.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#qué-puede-hacerse-con-javascript",
    "href": "05-leaflet.html#qué-puede-hacerse-con-javascript",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.3 ¿Qué puede hacerse con JavaScript?",
    "text": "5.3 ¿Qué puede hacerse con JavaScript?\n\nControlar multimedia (ej. imágenes, videos, sonidos).\nReaccionar a “eventos” (ej. presionar un botón).\nModificar dinámicamente el contenido de una página web.\nManejar mapas interactivos.\nY muchas otras cosas más…",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#el-programa-hola-mundo-en-javascript",
    "href": "05-leaflet.html#el-programa-hola-mundo-en-javascript",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.4 El programa “Hola mundo” en JavaScript",
    "text": "5.4 El programa “Hola mundo” en JavaScript\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hola mundo&lt;/title&gt;\n        &lt;meta charset=\"UTF-8\"&gt; \n        &lt;script&gt;\n            /* Función que imprime \"Hola mundo\" en una ventana de alerta */\n            function holaMundo () {\n                alert(\"Hola mundo\");\n            }        \n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button type=\"button\" onclick=\"holaMundo()\"&gt;\n            Presióneme\n        &lt;/button&gt;        \n    &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#el-elemento-script-de-html",
    "href": "05-leaflet.html#el-elemento-script-de-html",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "6.1 El elemento script de HTML",
    "text": "6.1 El elemento script de HTML\nEl elemento script se utiliza para incluir código de algún lenguaje de programación, típicamente JavaScript, aunque también usarse con otros lenguajes y sintaxis (ej. JSON).\nEjemplos de diferentes formas de incluir código JS en un documento HTML:\n&lt;!-- Código escrito directamente --&gt;\n&lt;script&gt;\n    /* Función que imprime la hilera \"Hola mundo\" */\n    function holaMundo () {\n        alert(\"¡Hola mundo!\");\n    }        \n&lt;/script&gt;\n\n&lt;!-- Inclusión de un archivo local --&gt;\n&lt;script src=\"js/misfunciones.js\"&gt;&lt;/script&gt;\n\n&lt;!-- Inclusión de un archivo remoto --&gt;\n&lt;script src=\"https://maps.googleapis.com/maps/api/js\"&gt;&lt;/script&gt; \n\n&lt;!-- Inclusión de un archivo remoto con verificación de integridad --&gt;\n&lt;script src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\" integrity=\"sha512XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==\" crossorigin=\"\"&gt;&lt;/script&gt;",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#sintaxis-de-javascript",
    "href": "05-leaflet.html#sintaxis-de-javascript",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "6.2 Sintaxis de JavaScript",
    "text": "6.2 Sintaxis de JavaScript\n\n6.2.1 Comentarios\nPara varias líneas:\n/* Este es un\n   comentario de\n   varias líneas \n*/\nPara una línea:\nvar i = 1; // contador inicializado en 1       \nvar j = 2; // contador inicializado en 2 \n\n\n6.2.2 Declaración e inicialización de variables\nSe declaran con la palabra reservada var y se inicializan con el operador =.\nvar lenguaje;\nvar numeroAureo, pi;\nvar esBisiesto = false;                                \n\nlenguaje = \"JavaScript\";\nnumeroAureo = 1.61803, pi = 3.14;\nEl operador = se usa también para actualizar los valores de las variables, después de inicializarlas.\n\n\n6.2.3 Tipos de datos\n\n6.2.3.1 Numéricos\nIncluye números tanto enteros como decimales.\nvar cantidadEstudiantes = 12;\nvar pi = 3.14;\n\nx1 = 1, x2 = 2, x3 = 4, x3 = 8, x4 = 16;\n\nsuma = 10 + 20; resta = 20 - 2;\nmultiplicacion = 2 * 3; divison = 2.4 * 4.7;\n\ni = 10; j = 20;\ni++; // Resultado: 11\nj--; // Resultado: 19\n\n\n6.2.3.2 Textuales\nSon hileras de texto escritas entre comillas simples o dobles.\nvar continente = \"América\";\nvar pais = \"Costa Rica\", provincia = 'Heredia';\n\ncita = \"'Pienso, por lo tanto existo', (René Descarte, 1637)\";\n\nnombreCompleto = \"John\" + \" \" + \"Doe\"; // resultado: \"John Doe\"   \n\n\n6.2.3.3 Booleanos\nTienen dos posibles valores: verdadero (true) o falso (false).\nvar esBisiesto = true;\nvar esLunes = false;\n\n// \"Y\" lógico (AND)\n2 &gt; 1 && 2 == (1 + 1); // Resultado: true;\n\n// \"O\" lógico (OR)\n1 &gt; 2 || 4 &lt; 3; // Resultado: false;\n\n// \"No\" lógico (NOT)\n!(2 &gt; 1); // Resultado: false;\n\n\n6.2.3.4 Arreglos (arrays)\nSus elementos se separan con comas y se encierran entre paréntesis cuadrados ([]). Sus índices (i.e. posiciones) comienzan en 0.\nvar nombres = ['Carlos', 'Lucía', 'Jorge'];\nvar numeros = [20, 9, 10.3];\n\nnombres[0]; // Resultado: 'Carlos'\nnumeros[2]; // Resultado: 10.3\n\n\n6.2.3.5 Objetos\nSon estructuras compuestas por listas de tuplas de la forma propiedad:valor.\nvar perro = {nombre:'Lassie', raza:'Collie', sexo:'Femenino', edad:7 };       \n\nperro.nombre; // Resultado: 'Lassie'\nperro.edad; // Resultado: 7\n\n\n\n6.2.4 Funciones\nDeclaración\nfunction [nombre-función] ([arg1], [arg2], ..., [argn]) {       \n  [cuerpo-función]\n  \n  return [valor-retorno]\n}\nEjemplo\nfunction cuadrado (numero) {\n  c = numero * numero;\n  \n  return c;\n}\n\ncantidad = cuadrado(8);\n\n\n6.2.5 Condicionales\n\n6.2.5.1 if\nSintaxis\nif ([condición]) {\n  [código a ejecutarse si la condición es verdadera];       \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n}\n\n\n6.2.5.2 if - else\nSintaxis\nif ([condición]) {\n  [código a ejecutarse si la condición es verdadera];       \n} else {\n  [código a ejecutarse si la condición es falsa];       \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n} else {\n  alert(\"x es mayor o igual que y\");\n}\n\n\n6.2.5.3 if - else if - else\nSintaxis\nif ([condición-1]) {\n  [código a ejecutarse si la condición-1 es verdadera];\n} else if [condición-n]{\n  [código a ejecutarse si la condición-n es verdadera];\n} else {\n  [código a ejecutarse si todas las condiciones son falsas];        \n}\nEjemplo\nvar x = 2, y = 4;\nif (x &lt; y) {\n  alert(\"x es menor o igual que y\");\n} else if (x &gt; y) {\n  alert(\"x es mayor que y\");\n} else {\n  alert(\"x es igual a y\");\n}\n\n\n6.2.5.4 switch\nSintaxis\nswitch ([expresión]) {\n  case [opción-1]:\n    [código a ejecutarse para la opción-1]\n    break;\n  case [opción-n]:\n    [código a ejecutarse para la opción-n]\n    break;\n  default:\n    [código a ejecutarse si no se cumple ninguna opción]\n}\nbreak detiene la ejecución e impide que las otras opciones sean evaluadas.\nEjemplo\ncodigoMes = 1;\nswitch (codigoMes) {\n  case 1:\n    nombreMes = \"Enero\";\n    break;\n  case 2:\n    nombreMes = \"Febrero\";\n    break;\n  case 3:\n    nombreMes = \"Marzo\";\n    break;                        \n  default:\n    nombreMes = \"Otro\";\n}\nalert(nombreMes);\n\n\n\n6.2.6 Ciclos\n\n6.2.6.1 for\nSintaxis\nfor ([expresión-inicial];[condición]; [expresión-incremento]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]\nfor (i = 1; i &lt;= 3; i++) {          \n  alert(i * i);\n}\n\n\n6.2.6.2 while\nSintaxis\nwhile ([condición]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]           \nvar i = 1;\nwhile (i &lt;= 3) {          \n  alert(i * i);\n}\n\n\n6.2.6.3 for.. in\nSintaxis\nfor ([variable] in [objeto]) {          \n  [cuerpo-ciclo]\n}\nEjemplo\n// Imprime los valores de las propiedades de un objeto\nvar perro = {nombre:'Lassie', raza:'Collie', sexo:'Femenino', edad:7 };           \nfor (i in perro) {          \n  alert(perro[i]);\n  i++;\n}\n\n\n6.2.6.4 do .. while\nSintaxis\ndo {          \n  [cuerpo-ciclo]\n} while ([condición]);\nEjemplo\n// Imprime los cuadrados de i, para i en [1..3]           \nvar i = 1;\ndo {          \n  alert(i * i);\n  i++;\n} while (i &lt;= 3);",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#ejercicios",
    "href": "05-leaflet.html#ejercicios",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.6 Ejercicios",
    "text": "5.6 Ejercicios\nClone el código del mapa de ejemplo y:\n\nAgregue dos capas base.\nAgregue un marcador para San José.\nEn los marcadores, agregue ventanas de popup con el nombre de cada ciudad (o cantón) y un enlace a la página correspondiente en Wikipedia.\nPersonalice los marcadores (al menos uno) con íconos de Font Awsome.\nAgregue un control de escala.\nPublique su mapa en GitHub Pages.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#documentación",
    "href": "05-leaflet.html#documentación",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.2 Documentación",
    "text": "5.2 Documentación\nLa referencia de la interfaz de programación de aplicaciones (API) de Leaflet contiene la documentación de las clases, métodos, eventos y demás componentes para la programación en JavaScript. El sitio oficial contiene también un conjunto de tutoriales y ejemplos.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#preparativos-para-el-uso",
    "href": "05-leaflet.html#preparativos-para-el-uso",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.3 Preparativos para el uso",
    "text": "5.3 Preparativos para el uso\nDe acuerdo con la Guía de inicio rápido, para utilizar Leaflet en un sitio web, primero debe incluirse en el código HTML:\n\nUn enlace a la hoja CSS de Leaflet.\nUn enlace a la biblioteca JavaScript con el código de Leaflet.\nUn elemento div para contener el mapa.\n\nLos archivos JavaScript y CSS de Leaflet pueden descargarse del repositorio de código fuente o referenciarse a través de enlaces a una red de distribución de contenidos (CDN).",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#ejemplo-de-mapa-leaflet-básico",
    "href": "05-leaflet.html#ejemplo-de-mapa-leaflet-básico",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.4 Ejemplo de mapa Leaflet básico",
    "text": "5.4 Ejemplo de mapa Leaflet básico\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet.html#clases-del-api-de-leaflet",
    "href": "05-leaflet.html#clases-del-api-de-leaflet",
    "title": "5  Leaflet - biblioteca para desarrollo de mapas interactivos",
    "section": "5.5 Clases del API de Leaflet",
    "text": "5.5 Clases del API de Leaflet\n\n5.5.1 Clase Map\nLa clase Map es la clase central del API de Leaflet. Se utiliza para crear un mapa y manipularlo.\n// Mapa Leaflet\nvar mapa = L.map('mapid').setView([10, -84], 7);\n\n\n5.5.2 Método setView()\nEl método setView() asigna una vista (centro y nivel de acercamiento) y niveles de animación al mapa.\n// Definición de la vista de un mapa\nmap.setView(L.latLng([10, -84]), 10);   \n\n\n5.5.3 Clase TileLayer\nLa clase TileLayer se utiliza para desplegar capas de teselas.\n// Despliegue de la capa de OpenStreetMap\nL.tileLayer(\n  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?', \n  {\n    maxZoom: 19,\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n  }\n)\nEn Leaflet Provider Demo puede verse una lista de proveedores de capas de teselas.\n\n\n5.5.4 Clase Marker\nLa clase Marker se utiliza para desplegar marcadores en el mapa.\nPuede utilizarse conjuntamente con las clases Popup y Tooltip, para desplegar información en ventanas emergentes.\n// Marcador para la Catedral Metropolitana de San José\nvar catedralSJMarker = L.marker([9.9326673, -84.0787633])\n\ncatedralSJMarker.bindPopup('&lt;a href=\"https://es.wikipedia.org/wiki/Catedral_metropolitana_de_San_Jos%C3%A9\"&gt;Catedral Metropolitana de San José&lt;/a&gt;.&lt;br&gt;Catedral de estilo clásico y barroco. Templo principal de la arquidiócesis católica de San José.&lt;br&gt;Construída entre 1825 y 1827 y reconstruída en 1878.').openPopup();\ncatedralSJMarker.bindTooltip(\"Catedral Metropolitana de San José\").openTooltip();\nVarios sitios web ofrecen íconos que pueden utilizarse como marcadores personalizados como, por ejemplo, Font Awesome. Para utilizarlos, siga la documentación en Font Awesome 5 Intro y Basic Use - Font Awesome. Puede ver un ejemplo de su uso en https://tpb729-desarrollosigweb-2021.github.io/ejemplo-mapa-leaflet-iconos-fa/.\n\n\n5.5.5 Clase Control\nLa clase Control es la clase base para implementar controles en un mapa. Todas las clases de controles heredan de esta clase. Ejemplos de clases de controles:\n\nZoom: botones de acercamiento y alejamiento.\nAttribution: datos de atribución (ej. autoría).\nLayers: activa y desactiva capas.\nScale: añade una escala.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - biblioteca para desarrollo de mapas interactivos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html",
    "href": "05-leaflet-conceptos-basicos.html",
    "title": "5  Leaflet - conceptos básicos",
    "section": "",
    "text": "5.1 Introducción\nLeaflet es una biblioteca de programación en JavaScript para hacer mapas en la Web. Es de código abierto y fue diseñada para funcionar en una gran variedad de dispositivos, incluyendo móviles (ej. celulares, tabletas). Su funcionalidad puede ser extendida a través de complementos. Su primera versión fue publicada en 2011 por Vladimir Agafonkin. Junto con OpenLayers y Google Maps, es una de las más bibliotecas más populares para programar mapas en la Web.\nEl código JavaScript de Leaflet se invoca desde documentos en Lenguaje de Marcas de hipertexto (HTML). Su código fuente se distribuye junto con un conjunto de Hojas de Estilo en Cascada (CSS).",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html#documentación",
    "href": "05-leaflet-conceptos-basicos.html#documentación",
    "title": "5  Leaflet - conceptos básicos",
    "section": "5.2 Documentación",
    "text": "5.2 Documentación\nLa referencia de la interfaz de programación de aplicaciones (API) de Leaflet contiene la documentación de las clases, métodos, eventos y demás componentes para la programación en JavaScript. El sitio oficial contiene también un conjunto de tutoriales y ejemplos.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html#preparativos-para-el-uso",
    "href": "05-leaflet-conceptos-basicos.html#preparativos-para-el-uso",
    "title": "5  Leaflet - conceptos básicos",
    "section": "5.3 Preparativos para el uso",
    "text": "5.3 Preparativos para el uso\nDe acuerdo con la Guía de inicio rápido, para utilizar Leaflet en un sitio web, primero debe incluirse en el código HTML:\n\nUn enlace a la hoja CSS de Leaflet.\nUn enlace a la biblioteca JavaScript con el código de Leaflet.\nUn elemento div para contener el mapa.\n\nLos archivos JavaScript y CSS de Leaflet pueden descargarse del repositorio de código fuente o referenciarse a través de enlaces a una red de distribución de contenidos (CDN).",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html#ejemplo-de-mapa-leaflet-básico",
    "href": "05-leaflet-conceptos-basicos.html#ejemplo-de-mapa-leaflet-básico",
    "title": "5  Leaflet - conceptos básicos",
    "section": "5.4 Ejemplo de mapa Leaflet básico",
    "text": "5.4 Ejemplo de mapa Leaflet básico\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html#clases-del-api-de-leaflet",
    "href": "05-leaflet-conceptos-basicos.html#clases-del-api-de-leaflet",
    "title": "5  Leaflet - conceptos básicos",
    "section": "5.5 Clases del API de Leaflet",
    "text": "5.5 Clases del API de Leaflet\n\n5.5.1 Clase Map\nLa clase Map es la clase central del API de Leaflet. Se utiliza para crear un mapa y manipularlo.\n// Mapa Leaflet\nvar mapa = L.map('mapid').setView([10, -84], 7);\n\n\n5.5.2 Método setView()\nEl método setView() asigna una vista (centro y nivel de acercamiento) y niveles de animación al mapa.\n// Definición de la vista de un mapa\nmap.setView(L.latLng([10, -84]), 10);   \n\n\n5.5.3 Clase TileLayer\nLa clase TileLayer se utiliza para desplegar capas de teselas.\n// Despliegue de la capa de OpenStreetMap\nL.tileLayer(\n  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?', \n  {\n    maxZoom: 19,\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n  }\n)\nEn Leaflet Provider Demo puede verse una lista de proveedores de capas de teselas.\n\n\n5.5.4 Clase Marker\nLa clase Marker se utiliza para desplegar marcadores en el mapa.\nPuede utilizarse conjuntamente con las clases Popup y Tooltip, para desplegar información en ventanas emergentes.\n// Marcador para la Catedral Metropolitana de San José\nvar catedralSJMarker = L.marker([9.9326673, -84.0787633])\n\ncatedralSJMarker.bindPopup('&lt;a href=\"https://es.wikipedia.org/wiki/Catedral_metropolitana_de_San_Jos%C3%A9\"&gt;Catedral Metropolitana de San José&lt;/a&gt;.&lt;br&gt;Catedral de estilo clásico y barroco. Templo principal de la arquidiócesis católica de San José.&lt;br&gt;Construída entre 1825 y 1827 y reconstruída en 1878.').openPopup();\ncatedralSJMarker.bindTooltip(\"Catedral Metropolitana de San José\").openTooltip();\nVarios sitios web ofrecen íconos que pueden utilizarse como marcadores personalizados como, por ejemplo, Font Awesome. Para utilizarlos, siga la documentación en Font Awesome 5 Intro y Basic Use - Font Awesome. Puede ver un ejemplo de su uso en https://tpb729-desarrollosigweb-2021.github.io/ejemplo-mapa-leaflet-iconos-fa/.\n\n\n5.5.5 Clase Control\nLa clase Control es la clase base para implementar controles en un mapa. Todas las clases de controles heredan de esta clase. Ejemplos de clases de controles:\n\nZoom: botones de acercamiento y alejamiento.\nAttribution: datos de atribución (ej. autoría).\nLayers: activa y desactiva capas.\nScale: añade una escala.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "05-leaflet-conceptos-basicos.html#ejercicios",
    "href": "05-leaflet-conceptos-basicos.html#ejercicios",
    "title": "5  Leaflet - conceptos básicos",
    "section": "5.6 Ejercicios",
    "text": "5.6 Ejercicios\nClone el código del mapa de ejemplo y:\n\nAgregue dos capas base.\nAgregue un marcador para San José.\nEn los marcadores, agregue ventanas de popup con el nombre de cada ciudad (o cantón) y un enlace a la página correspondiente en Wikipedia.\nPersonalice los marcadores (al menos uno) con íconos de Font Awsome.\nAgregue un control de escala.\nPublique su mapa en GitHub Pages.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Leaflet - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html",
    "href": "06-leaflet-capas-vectoriales.html",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "",
    "text": "6.1 Introducción\nLeaflet puede manejar tanto capas vectoriales como raster. Aquí se describe el manejo de datos vectoriales mediante la clase GeoJSON.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#documentación",
    "href": "06-leaflet-capas-vectoriales.html#documentación",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.2 Documentación",
    "text": "6.2 Documentación\nLa referencia de la interfaz de programación de aplicaciones (API) de Leaflet contiene la documentación de las clases, métodos, eventos y demás componentes para la programación en JavaScript. El sitio oficial contiene también un conjunto de tutoriales y ejemplos.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#preparativos-para-el-uso",
    "href": "06-leaflet-capas-vectoriales.html#preparativos-para-el-uso",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.3 Preparativos para el uso",
    "text": "6.3 Preparativos para el uso\nDe acuerdo con la Guía de inicio rápido, para utilizar Leaflet en un sitio web, primero debe incluirse en el código HTML:\n\nUn enlace a la hoja CSS de Leaflet.\nUn enlace a la biblioteca JavaScript con el código de Leaflet.\nUn elemento div para contener el mapa.\n\nLos archivos JavaScript y CSS de Leaflet pueden descargarse del repositorio de código fuente o referenciarse a través de enlaces a una red de distribución de contenidos (CDN).",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#ejemplo-de-mapa-leaflet-básico",
    "href": "06-leaflet-capas-vectoriales.html#ejemplo-de-mapa-leaflet-básico",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.4 Ejemplo de mapa Leaflet básico",
    "text": "6.4 Ejemplo de mapa Leaflet básico\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#clases-del-api-de-leaflet",
    "href": "06-leaflet-capas-vectoriales.html#clases-del-api-de-leaflet",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.2 Clases del API de Leaflet",
    "text": "6.2 Clases del API de Leaflet\n\n6.2.1 Clase GeoJSON\nLa clase GeoJSON representa un objeto o un arreglo de objetos GeoJSON, permitiendo su despliegue en un mapa Leaflet.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#ejercicios",
    "href": "06-leaflet-capas-vectoriales.html#ejercicios",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.5 Ejercicios",
    "text": "6.5 Ejercicios\n\nCree un sitio web con un mapa Leaflet que contenga:\n\nAl menos una capa base.\nAl menos una capa de polígonos.\nAl menos una capa de líneas.\nAl menos una capa de puntos.\n\nPublique el sitio en GitHub Pages.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#ejemplo-de-mapa-leaflet-con-capas-vectoriales",
    "href": "06-leaflet-capas-vectoriales.html#ejemplo-de-mapa-leaflet-con-capas-vectoriales",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.3 Ejemplo de mapa Leaflet con capas vectoriales",
    "text": "6.3 Ejemplo de mapa Leaflet con capas vectoriales\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#clases-del-api-de-leaflet-1",
    "href": "06-leaflet-capas-vectoriales.html#clases-del-api-de-leaflet-1",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.4 Clases del API de Leaflet",
    "text": "6.4 Clases del API de Leaflet\n\n6.4.1 Clase Map\nLa clase Map es la clase central del API de Leaflet. Se utiliza para crear un mapa y manipularlo.\n// Mapa Leaflet\nvar mapa = L.map('mapid').setView([10, -84], 7);\n\n\n6.4.2 Método setView()\nEl método setView() asigna una vista (centro y nivel de acercamiento) y niveles de animación al mapa.\n// Definición de la vista de un mapa\nmap.setView(L.latLng([10, -84]), 10);   \n\n\n6.4.3 Clase TileLayer\nLa clase TileLayer se utiliza para desplegar capas de teselas.\n// Despliegue de la capa de OpenStreetMap\nL.tileLayer(\n  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?', \n  {\n    maxZoom: 19,\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n  }\n)\nEn Leaflet Provider Demo puede verse una lista de proveedores de capas de teselas.\n\n\n6.4.4 Clase Marker\nLa clase Marker se utiliza para desplegar marcadores en el mapa.\nPuede utilizarse conjuntamente con las clases Popup y Tooltip, para desplegar información en ventanas emergentes.\n// Marcador para la Catedral Metropolitana de San José\nvar catedralSJMarker = L.marker([9.9326673, -84.0787633])\n\ncatedralSJMarker.bindPopup('&lt;a href=\"https://es.wikipedia.org/wiki/Catedral_metropolitana_de_San_Jos%C3%A9\"&gt;Catedral Metropolitana de San José&lt;/a&gt;.&lt;br&gt;Catedral de estilo clásico y barroco. Templo principal de la arquidiócesis católica de San José.&lt;br&gt;Construída entre 1825 y 1827 y reconstruída en 1878.').openPopup();\ncatedralSJMarker.bindTooltip(\"Catedral Metropolitana de San José\").openTooltip();\nVarios sitios web ofrecen íconos que pueden utilizarse como marcadores personalizados como, por ejemplo, Font Awesome. Para utilizarlos, siga la documentación en Font Awesome 5 Intro y Basic Use - Font Awesome. Puede ver un ejemplo de su uso en https://tpb729-desarrollosigweb-2021.github.io/ejemplo-mapa-leaflet-iconos-fa/.\n\n\n6.4.5 Clase Control\nLa clase Control es la clase base para implementar controles en un mapa. Todas las clases de controles heredan de esta clase. Ejemplos de clases de controles:\n\nZoom: botones de acercamiento y alejamiento.\nAttribution: datos de atribución (ej. autoría).\nLayers: activa y desactiva capas.\nScale: añade una escala.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "06-leaflet-capas-vectoriales.html#la-biblioteca-jquery",
    "href": "06-leaflet-capas-vectoriales.html#la-biblioteca-jquery",
    "title": "6  Leaflet - manejo de capas vectoriales",
    "section": "6.4 La biblioteca jQuery",
    "text": "6.4 La biblioteca jQuery\njQuery es una biblioteca JavaScript de uso muy extendido. Fue diseñada para facilitar el acceso al Document Object Model (DOM) de HTML, así como para el manejo de eventos y animaciones CSS, entre otras capacidades.\nPara utilizar jQuery, debe incluirse su enlace en el documento HTML:\n&lt;!-- Enlace a biblioteca JQuery --&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.7.1.js\"\n  integrity=\"sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=\"\n  crossorigin=\"anonymous\"\n&gt;&lt;/script&gt;\njQuery define una función global llamada jQuery(), la cual acostumbra referenciarse de manera abreviada con el símbolo $. La sintaxis básica de jQuery es $(selector).accion().\n// Esconde todos los elementos p\n$(\"p\").hide()\n\n// Esconde todos los elementos de la clase test\n$(\".test\").hide()\n\n// Esconde el elemento con id=\"test\"\n$(\"#test\").hide()\n\n// Cambia el color de todos los elementos h1\n$(\"h1\").css(\"color\", \"#0088ff\");",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Leaflet - manejo de capas vectoriales</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html",
    "href": "07-leaflet-coropletas-agrupados-calor.html",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "",
    "text": "7.1 Introducción\nEn este capítulo, se describen diversas formas de visualización de capas vectoriales en Leaflet:\nSe presentan también varios complementos de Leaflet que facilitan la programación de estos tipos de mapas.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#introducción",
    "href": "07-leaflet-coropletas-agrupados-calor.html#introducción",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "",
    "text": "Capas de coropletas.\nCapas de puntos agrupados.\nCapas de calor.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-coropletas",
    "href": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-coropletas",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "7.2 Mapas con capas de coropletas",
    "text": "7.2 Mapas con capas de coropletas\nLos mapas de coropletas se utilizan para visualizar el valor de una variable numérica en un área geográfica. El área se divide en regiones o polígonos y cada uno se colorea o sombrea de acuerdo con el valor de la variable que se está representando.\nEjemplo de mapa Leaflet con capas de coropletas\nEste ejemplo se implementa mediante el complemento Leaflet Choropleth.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#ejemplo-de-mapa-leaflet-con-capas-de-coropletas",
    "href": "07-leaflet-coropletas-agrupados-calor.html#ejemplo-de-mapa-leaflet-con-capas-de-coropletas",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "7.3 Ejemplo de mapa Leaflet con capas de coropletas",
    "text": "7.3 Ejemplo de mapa Leaflet con capas de coropletas\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-puntos-agrupados",
    "href": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-puntos-agrupados",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "7.3 Mapas con capas de puntos agrupados",
    "text": "7.3 Mapas con capas de puntos agrupados\nEl propósito de este tipo de mapas es agrupar y representar visualmente un gran número de puntos de datos que están cercanos entre sí geográficamente, lo que ayuda a simplificar la visualización y a entender mejor las distribuciones o patrones subyacentes en los datos.\nEjemplo de mapa Leaflet con capas de puntos agrupados\nEste ejemplo se implementa mediante el complemento Leaflet.markercluster.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#ejemplo-de-mapa-leaflet-con-capas-de-puntos-agrupados",
    "href": "07-leaflet-coropletas-agrupados-calor.html#ejemplo-de-mapa-leaflet-con-capas-de-puntos-agrupados",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "7.5 Ejemplo de mapa Leaflet con capas de puntos agrupados",
    "text": "7.5 Ejemplo de mapa Leaflet con capas de puntos agrupados\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-calor",
    "href": "07-leaflet-coropletas-agrupados-calor.html#mapas-con-capas-de-calor",
    "title": "7  Leaflet - mapas con capas de coropletas, puntos agrupados y calor",
    "section": "7.4 Mapas con capas de calor",
    "text": "7.4 Mapas con capas de calor\nLos mapas de calor se utilizan para visualizar la densidad o intensidad de algún fenómeno geográfico en diferentes áreas. Los colores en un mapa de calor generalmente varían de claro a oscuro o a través de un espectro de colores, donde los tonos pueden representar incrementos o decrementos en la magnitud de los datos.\nEjemplo de mapa Leaflet con capas de calor\nEste ejemplo se implementa mediante el complemento Leaflet.heat.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Leaflet - mapas con capas de coropletas, puntos agrupados y calor</span>"
    ]
  },
  {
    "objectID": "08-leaflet-capas-raster.html",
    "href": "08-leaflet-capas-raster.html",
    "title": "8  Leaflet - mapas con capas raster",
    "section": "",
    "text": "8.1 Introducción\nLeaflet puede manejar tanto capas vectoriales como raster. Aquí se describe el manejo de datos vectoriales mediante el complemento georaster-layer-for-leaflet.",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Leaflet - mapas con capas raster</span>"
    ]
  },
  {
    "objectID": "08-leaflet-capas-raster.html#el-complemento-georasterlayer",
    "href": "08-leaflet-capas-raster.html#el-complemento-georasterlayer",
    "title": "8  Leaflet - mapas con capas raster",
    "section": "8.2 El complemento GeoRasterLayer",
    "text": "8.2 El complemento GeoRasterLayer\ngeoraster-layer-for-leaflet despliega archivos GeoTIFF en mapas Leaflet.\nEjemplo de mapa Leaflet con capas raster\nEste ejemplo se implementa mediante el complemento georaster-layer-for-leaflet.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Leaflet - mapas con capas raster</span>"
    ]
  },
  {
    "objectID": "09-leaflet-wms-wfs.html",
    "href": "09-leaflet-wms-wfs.html",
    "title": "9  Leaflet - mapas con capas WMS y WFS",
    "section": "",
    "text": "9.1 Introducción\nLos servicios WMS (Web Map Service) y WFS (Web Feature Service) son dos tipos de servicios web estándar definidos por el Open Geospatial Consortium (OGC) que se utilizan para compartir datos geoespaciales a través de la web.\nEn Leaflet, una capa WMS puede agregarse a un mapa mediante la clase TileLayer.WMS.\nEjemplo de mapa Leaflet con capas WMS y WFS\nHaga clic en la imagen para acceder al mapa interactivo.\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Leaflet - mapas con capas WMS y WFS</span>"
    ]
  },
  {
    "objectID": "09-leaflet-wms-wfs.html#capas-wms",
    "href": "09-leaflet-wms-wfs.html#capas-wms",
    "title": "9  Leaflet - mapas con capas WMS y WFS",
    "section": "9.2 Capas WMS",
    "text": "9.2 Capas WMS\n\n9.2.1 El complemento …\ngeoraster-layer-for-leaflet despliega archivos GeoTIFF en mapas Leaflet.\nEjemplo de mapa Leaflet con capas WMS\nEste ejemplo se implementa mediante el complemento georaster-layer-for-leaflet.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Leaflet - mapas con capas WMS y WFS</span>"
    ]
  },
  {
    "objectID": "09-leaflet-wms-wfs.html#capas-wfs",
    "href": "09-leaflet-wms-wfs.html#capas-wfs",
    "title": "9  Leaflet - mapas con capas WMS y WFS",
    "section": "9.3 Capas WFS",
    "text": "9.3 Capas WFS\n\n9.3.1 El complemento …\ngeoraster-layer-for-leaflet despliega archivos GeoTIFF en mapas Leaflet.\nEjemplo de mapa Leaflet con capas WMS\nEste ejemplo se implementa mediante el complemento georaster-layer-for-leaflet.\nHaga clic en la imagen para acceder al mapa interactivo.\n\nCódigo fuente",
    "crumbs": [
      "II - Leaflet: biblioteca para desarrollo de mapas interactivos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Leaflet - mapas con capas WMS y WFS</span>"
    ]
  },
  {
    "objectID": "tarea-02.html",
    "href": "tarea-02.html",
    "title": "Tarea 2",
    "section": "",
    "text": "Objetivos\nCada estudiante debe mostrar que es capaz de:",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#fecha-y-hora-límite-de-entrega",
    "href": "tarea-02.html#fecha-y-hora-límite-de-entrega",
    "title": "Tarea 2",
    "section": "",
    "text": "Grupo 001\n???",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#objetivos",
    "href": "tarea-02.html#objetivos",
    "title": "Tarea 2",
    "section": "",
    "text": "Desarrollar mapas interactivos con la biblioteca Leaflet de JavaScript.\nIncluir capas vectoriales y raster en los mapas Leaflet.\nIncluir controles en los mapas Leaflet.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#entregables",
    "href": "tarea-02.html#entregables",
    "title": "Tarea 2",
    "section": "Entregables",
    "text": "Entregables\n\nDirección de un repositorio en GitHub (ej. https://github.com/mfvargas/tarea-02) con el contenido especificado en la sección Desarrollo.\nDirección de un sitio web publicado en GitHub Pages generado a partir del repositorio especificado en el punto anterior (ej. https://mfvargas.github.io/tarea-02/). Se recomienda usar un nombre más significativo que tarea-02 para el repositorio, acorde con su contenido.\n\nLa entrega debe realizarse a través de la plataforma Mediación Virtual.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#consideraciones-adicionales",
    "href": "tarea-02.html#consideraciones-adicionales",
    "title": "Tarea 2",
    "section": "Consideraciones adicionales",
    "text": "Consideraciones adicionales\nLa tarea puede desarrollarse individualmente o en parejas.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#desarrollo",
    "href": "tarea-02.html#desarrollo",
    "title": "Tarea 2",
    "section": "Desarrollo",
    "text": "Desarrollo\nDebe desarrollar un sitio web, que contenga mapas interactivos, sobre un tema de su elección (un adelanto del trabajo final de graduación, alguna temática tratada en otro curso, un proyecto personal, etc.). El sitio debe contener, como mínimo, los siguientes elementos:\n\nUn mapa interactivo desarrollado con Leaflet. Este mapa debe contener:\n\nAl menos dos capas base (ej. OpenStreetMap).\nAl menos una capa raster.\nAl menos dos capas vectoriales.\nAl menos una capa de coropletas, de calor o de puntos agrupados, basada en alguna de las capas vectoriales.\nUn control para activar y desactivar las capas.\nUn control de escala.\n\n\nLas capas vectoriales y raster deben ser diferentes a las usadas en clase. La idea general de esta tarea es que los estudiantes utilicen sus datos.\nEl contenido del sitio debe ser coherente y estar bien presentado.",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "tarea-02.html#calificación",
    "href": "tarea-02.html#calificación",
    "title": "Tarea 2",
    "section": "Calificación",
    "text": "Calificación\nEntre paréntesis, se muestra el porcentaje correspondiente a cada aspecto que se calificará:\nCoherencia y presentación general del sitio web (10%).\nRevisión de las direcciones entregadas:\n\nDirección del repositorio en GitHub (5%).\nDirección del sitio web publicado en GitHub Pages (5%).\n\nRevisión de los componentes del mapa:\n\nCapas base (10%).\nCapa raster (20%).\nCapas vectoriales (20%).\nCapa de coropletas, de calor o de puntos agrupados (20%).\nControl de capas (5%).\nControl de escala (5%).",
    "crumbs": [
      "Evaluaciones",
      "Tarea 2"
    ]
  },
  {
    "objectID": "parte-iii-geodjango.html",
    "href": "parte-iii-geodjango.html",
    "title": "III - GeoDjango: marco de trabajo para desarrollo de aplicaciones geoespaciales en la web",
    "section": "",
    "text": "10 GeoDjango - conceptos básicos",
    "crumbs": [
      "III - GeoDjango: marco de trabajo para desarrollo de aplicaciones geoespaciales en la web"
    ]
  },
  {
    "objectID": "10-geodjango-conceptos-basicos.html",
    "href": "10-geodjango-conceptos-basicos.html",
    "title": "10  GeoDjango - conceptos básicos",
    "section": "",
    "text": "10.1 Introducción\nGeoDjango es una extensión de Django, un popular marco de trabajo web de Python, que permite desarrollar aplicaciones geoespaciales.",
    "crumbs": [
      "III - GeoDjango: marco de trabajo para desarrollo de aplicaciones geoespaciales en la web",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>GeoDjango - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "10-geodjango-conceptos-basicos.html#instalación-y-configuración",
    "href": "10-geodjango-conceptos-basicos.html#instalación-y-configuración",
    "title": "10  GeoDjango - conceptos básicos",
    "section": "10.2 Instalación y configuración",
    "text": "10.2 Instalación y configuración\n\nInstalar Miniconda.\nCrear un ambiente conda:\n\n# Actualización de Conda\nconda update conda\n\n# Borrado del ambiente (si es que existe)\n# conda remove -n geodjango\n\n# Creación del ambiente\nconda create -n geodjango\n\n# Activación del ambiente\nconda activate geodjango\n\n# Configuración del ambiente\nconda config --env --add channels conda-forge\nconda config --env --set channel_priority strict\n\n# Instalación de mamba\nconda install mamba\n\n# Instalación de módulos\nmamba install git python django gdal psycopg2 pillow\n\n# Desactivación del ambiente\nconda deactivate",
    "crumbs": [
      "III - GeoDjango: marco de trabajo para desarrollo de aplicaciones geoespaciales en la web",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>GeoDjango - conceptos básicos</span>"
    ]
  },
  {
    "objectID": "10-geodjango-conceptos-basicos.html#django",
    "href": "10-geodjango-conceptos-basicos.html#django",
    "title": "10  GeoDjango - conceptos básicos",
    "section": "10.2 Django",
    "text": "10.2 Django\n\n10.2.1 Instalación\n\nInstale Miniconda.\nCree un ambiente conda:\n\n# Actualización de Conda\nconda update conda\n\n# Borrado del ambiente (si es que existe)\n# conda remove -n desarrollo_django --all\n\n# Creación del ambiente\nconda create -n desarrollo_django\n\n# Activación del ambiente\nconda activate desarrollo_django\n\n# Configuración del ambiente\nconda config --env --add channels conda-forge\nconda config --env --set channel_priority strict\n\n# Instalación de mamba\nconda install mamba\n\n# Instalación de módulos\nmamba install git python django psycopg2 pillow\n\n# Desactivación del ambiente (para cuando termine de usarse)\nconda deactivate\n\nInstale PostgreSQL y PostGIS.\n\n\n\n10.2.2 Tutorial\nSiga el tutorial “Writing your first Django app”.",
    "crumbs": [
      "III - GeoDjango: marco de trabajo para desarrollo de aplicaciones geoespaciales en la web",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>GeoDjango - conceptos básicos</span>"
    ]
  }
]